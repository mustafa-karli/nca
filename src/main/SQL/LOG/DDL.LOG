 CREATE SEQUENCE BUSINESS_PARTNER_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE PARTNER_CERTIFICATION_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE ACCOUNT_SCHEMA_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE ACCOUNT_TRANSACTION_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE ACCOUNT_TX_TEMPLATE_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE SUPPORT_AREA_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE SUPPORT_GROUP_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE SUPPORT_TICKET_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE SERVICE_TYPE_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE MATERIAL_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE MATERIAL_GROUP_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE MATERIAL_MOVEMENT_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE MATERIAL_RESERVATION_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE ORGANIZATION_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE PERSON_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE QUALIFICATION_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE BOM_OPERATION_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE PRODUCTION_JOB_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE PRODUCTION_ORDER_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE CATEGORY_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE PROJECT_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE SUBCONTRACTOR_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE WORKER_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE PROPOSAL_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE PURCHASE_DELIVERY_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE PURCHASE_ORDER_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE RFP_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE MATERIAL_REQUEST_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE SALES_CAMPAIGN_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE SALES_ORDER_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE CONTENT_DATA_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE NOTIFICATION_TYPE_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE TREE_DATA_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE USER_NOTIFICATION_ID_SEQ START WITH 1 INCREMENT BY 1;
 CREATE SEQUENCE SHIPMENT_ID_SEQ START WITH 1 INCREMENT BY 1;
 SET DATABASE SQL SYNTAX PGS TRUE;
 CREATE TABLE USER_ACCOUNT ( USERNAME             VARCHAR(30) NOT NULL, STATUS               CHAR(1)     NOT NULL, FIRST_NAME           VARCHAR(40) NOT NULL, LAST_NAME            VARCHAR(40) NOT NULL, EMAIL_ADDRESS        VARCHAR(80), PASSTEXT             VARCHAR(128), PASSDATE             TIMESTAMP, LASTLOGON            TIMESTAMP, CONSTRAINT USER_ACCOUNT_PK PRIMARY KEY (USERNAME) );
 INSERT INTO USER_ACCOUNT (USERNAME,STATUS,FIRST_NAME, LAST_NAME) VALUES ('EVERYONE','S','EVERYONE','EVERYONE');
 CREATE TABLE USER_FAVORITE ( USERNAME             VARCHAR(30)    NOT NULL, FAVORITE_TYPE        CHAR(2)        NOT NULL, OBJECT_ID            VARCHAR(30)    NOT NULL, DESCRIPTION          VARCHAR(80), CONSTRAINT USER_FAVORITE_PK PRIMARY KEY (USERNAME,FAVORITE_TYPE,OBJECT_ID), CONSTRAINT USER_FAVORITES   FOREIGN KEY (USERNAME) REFERENCES USER_ACCOUNT (USERNAME) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE AUTHORITY_GROUP ( AUTHORITY_GROUP                VARCHAR(30) NOT NULL, CAPTION                        VARCHAR(30) NOT NULL, CONSTRAINT AUTHORITY_GROUP_PK PRIMARY KEY (AUTHORITY_GROUP) );
 CREATE TABLE MAIN_MENU ( MENU                          VARCHAR(30)  NOT NULL, CAPTION                       VARCHAR(30)  NOT NULL, ICON                          VARCHAR(30)  NOT NULL, DISPLAY_ORDER                 SMALLINT     NOT NULL, CONSTRAINT MAIN_MENU_PK PRIMARY KEY (MENU) );
 CREATE TABLE SCREEN_PAGE ( PAGENAME                      VARCHAR(30)  NOT NULL, CAPTION                       VARCHAR(30)  NOT NULL, ICON                          VARCHAR(30)  NOT NULL, URL                           VARCHAR(100) NOT NULL, MENU                          VARCHAR(30)  NOT NULL, DISPLAY_ORDER                 SMALLINT     NOT NULL, CONSTRAINT SCREEN_PAGE_PK PRIMARY KEY (PAGENAME), CONSTRAINT SCREEN_PAGES   FOREIGN KEY (MENU) REFERENCES MAIN_MENU (MENU) );
 CREATE TABLE USER_AUTHORIZATION ( USERNAME                      VARCHAR(30)  NOT NULL, AUTHORITY_GROUP               VARCHAR(30)  NOT NULL, BEGDA                         TIMESTAMP    NOT NULL, ENDDA                         TIMESTAMP, CONSTRAINT USER_AUTHORIZATION_PK          PRIMARY KEY (USERNAME,AUTHORITY_GROUP), CONSTRAINT USER_ACCOUNT_AUTHORIZATIONS    FOREIGN KEY (USERNAME) REFERENCES USER_ACCOUNT (USERNAME) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT AUTHORITY_GROUP_AUTHORIZATIONS FOREIGN KEY (AUTHORITY_GROUP) REFERENCES AUTHORITY_GROUP (AUTHORITY_GROUP) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX USER_AUTHORIZATION_IND1 ON USER_AUTHORIZATION (AUTHORITY_GROUP);
 CREATE TABLE DOMAIN_NAME ( DOMAIN                        VARCHAR(30) NOT NULL, KEYSIZE                       SMALLINT    NOT NULL, CAPTION                       VARCHAR(80) NOT NULL, SORT_BY                       CHAR(1)     NOT NULL, CONSTRAINT DOMAIN_NAME_PK PRIMARY KEY (DOMAIN) );
 CREATE TABLE DOMAIN_VALUE( DOMAIN                        VARCHAR(30) NOT NULL, REFVALUE                      VARCHAR(30) NOT NULL, CAPTION                       VARCHAR(80) NOT NULL, CONSTRAINT DOMAIN_VALUE_PK PRIMARY KEY (DOMAIN, REFVALUE), CONSTRAINT DOMAIN_VALUES   FOREIGN KEY (DOMAIN) REFERENCES DOMAIN_NAME (DOMAIN) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE LANGUAGE( LANGCODE                      VARCHAR(2)  NOT NULL, CAPTION                       VARCHAR(30) NOT NULL, LOCALE_STR                    CHAR(5)     NOT NULL, DIRECTION                     VARCHAR(10) NOT NULL, FLAG                          VARCHAR(30) NOT NULL, CONSTRAINT LANGUAGE_PK PRIMARY KEY (LANGCODE) );
 CREATE TABLE CAPTION_TRANSLATION ( CAPTION                       VARCHAR(200) NOT NULL, LANGCODE                      VARCHAR(2)   NOT NULL, LABELUPPER                    VARCHAR(200) NOT NULL, LABELLOWER                    VARCHAR(200) NOT NULL, CONSTRAINT CAPTION_TRANSLATION_PK PRIMARY KEY (CAPTION, LANGCODE), CONSTRAINT CAPTION_TRANSLATIONS   FOREIGN KEY (LANGCODE) REFERENCES LANGUAGE (LANGCODE) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE AUTHORITY_OBJECT ( OBJECT_TYPE                    VARCHAR(30) NOT NULL, CONSTRAINT AUTHORITY_OBJECT_PK PRIMARY KEY (OBJECT_TYPE) );
 CREATE TABLE AUTHORITY_OBJECT_ACTION ( OBJECT_TYPE                   VARCHAR(30) NOT NULL, ACTION                        VARCHAR(30) NOT NULL, CONSTRAINT AUTHORITY_OBJECT_ACTION_PK PRIMARY KEY (OBJECT_TYPE,ACTION), CONSTRAINT AUTHORITY_OBJECT_ACTIONS   FOREIGN KEY (OBJECT_TYPE) REFERENCES AUTHORITY_OBJECT (OBJECT_TYPE) );
 CREATE TABLE OBJECT_AUTHORIZATION ( AUTHORITY_GROUP               VARCHAR(30)  NOT NULL, OBJECT_TYPE                   VARCHAR(30)  NOT NULL, ACTION                        VARCHAR(30)  NOT NULL, KEY_VALUE                     VARCHAR(100) NOT NULL, CONSTRAINT OBJECT_AUTHORIZATION_PK  PRIMARY KEY (AUTHORITY_GROUP,OBJECT_TYPE,ACTION,KEY_VALUE), CONSTRAINT OBJECT_AUTHORIZATIONS    FOREIGN KEY (AUTHORITY_GROUP)    REFERENCES AUTHORITY_GROUP (AUTHORITY_GROUP) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT OBJECT_AUTHORIZED_GROUPS FOREIGN KEY (OBJECT_TYPE,ACTION) REFERENCES AUTHORITY_OBJECT_ACTION (OBJECT_TYPE,ACTION) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX OBJECT_AUTHORIZATION_IND1 ON OBJECT_AUTHORIZATION (OBJECT_TYPE, ACTION);
 CREATE TABLE COUNTRY ( CODE                CHAR(2)      NOT NULL, CAPTION             VARCHAR(30)  NOT NULL, CONSTRAINT COUNTRY_PK PRIMARY KEY (CODE) );
 CREATE TABLE CITY ( COUNTRY_CODE        CHAR(2)  NOT NULL, CITY_CODE           CHAR(2)  NOT NULL, CAPTION             VARCHAR(80)  NOT NULL, CONSTRAINT CITY_PK PRIMARY KEY (COUNTRY_CODE, CITY_CODE), CONSTRAINT CITIES     FOREIGN KEY (COUNTRY_CODE) REFERENCES COUNTRY (CODE) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE VIEW USER_MENU_PERMISSION AS SELECT DISTINCT U.USERNAME, P.PAGENAME, P.CAPTION AS PAGE_CAPTION, P.ICON AS PAGE_ICON, P.URL, M.MENU, M.CAPTION AS MENU_CAPTION, M.ICON AS MENU_ICON, M.DISPLAY_ORDER AS MENU_ORDER, P.DISPLAY_ORDER AS PAGE_ORDER FROM OBJECT_AUTHORIZATION T, USER_AUTHORIZATION U, SCREEN_PAGE P, MAIN_MENU M WHERE T.AUTHORITY_GROUP=U.AUTHORITY_GROUP AND T.OBJECT_TYPE='PAGE' AND T.ACTION='ACCESS' AND T.KEY_VALUE=P.PAGENAME AND M.MENU=P.MENU;
 CREATE TABLE UNIT_CONVERSION ( SOURCE      VARCHAR(2), TARGET      VARCHAR(2), MULTIPLIER  DECIMAL(20,10), CONSTRAINT UNIT_CONVERSION_PK PRIMARY KEY (SOURCE,TARGET) );
 CREATE TABLE TABLE_CONTROLLER_STATIC ( TABLENAME            VARCHAR(30)   NOT NULL, ROOTMAPPING          VARCHAR(80)   NOT NULL, MODULE               VARCHAR(80)   NOT NULL, CUSTOMER_SPECIFIC    CHAR(1)       NOT NULL, ORGANIZATION_CHECK   CHAR(1)       NOT NULL, CACHE_IN_HASH        CHAR(1)       NOT NULL, SEARCH_VIEW          VARCHAR(80), LIST_VIEW            VARCHAR(80), EDIT_VIEW            VARCHAR(80), SHOW_VIEW            VARCHAR(80), SELECT_VIEW          VARCHAR(80), ORDERBY              VARCHAR(80), SEQUENCE_NAME        VARCHAR(30), CONSTRAINT TABLE_CONTROLLER_STATIC_PK PRIMARY KEY (TABLENAME) );
 CREATE TABLE TABLE_FIELD_FACE ( TABLENAME            VARCHAR(30)   NOT NULL, FIELDNAME            VARCHAR(30)   NOT NULL, EDIT_STYLE           VARCHAR(30)   NOT NULL, EDIT_JSTL_PATH       VARCHAR(80)   NOT NULL, VIEW_JSTL_PATH       VARCHAR(80)   NOT NULL, SEARCH_STYLE         CHAR(1)       NOT NULL, LOOKUP_STYLE         CHAR(1)       NOT NULL, TRANSLATED           CHAR(1)       NOT NULL, MINVALUE             VARCHAR(30), MAXVALUE             VARCHAR(30), CONSTRAINT TABLE_FIELD_FACE_PK PRIMARY KEY(TABLENAME,FIELDNAME), CONSTRAINT TABLE_FIELD_FACES FOREIGN KEY(TABLENAME) REFERENCES TABLE_CONTROLLER_STATIC (TABLENAME) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE TABLE_CONTENT_TYPE ( TABLENAME            VARCHAR(30)   NOT NULL, OBJECT_TYPE          CHAR(2)       NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, MIMETYPE             VARCHAR(200), CONSTRAINT TABLE_CONTENT_TYPE_PK PRIMARY KEY (TABLENAME, OBJECT_TYPE), CONSTRAINT TABLE_CONTENT_TYPES   FOREIGN KEY (TABLENAME) REFERENCES TABLE_CONTROLLER_STATIC (TABLENAME) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE TABLE_ACTION ( TABLENAME            VARCHAR(30)   NOT NULL, ACTION               VARCHAR(30)   NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, METHOD               VARCHAR(30)   NOT NULL, ENABLE               CHAR(1)       NOT NULL, AUTHORITY_CHECK      CHAR(1)       NOT NULL, RECORD_SPECIFIC      CHAR(1)       NOT NULL, CONSTRAINT TABLE_ACTION_PK PRIMARY KEY (TABLENAME, ACTION), CONSTRAINT TABLE_ACTIONS   FOREIGN KEY (TABLENAME) REFERENCES TABLE_CONTROLLER_STATIC (TABLENAME) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE MASTER_DETAIL_RELATION ( CONSTRAINT_NAME      VARCHAR(30)   NOT NULL, MASTER_TABLE         VARCHAR(30)   NOT NULL, DETAIL_TABLE         VARCHAR(30)   NOT NULL, DETAIL_ATTRIBUTE     VARCHAR(80)   NOT NULL, MD_VIEW              CHAR(1)       NOT NULL, PAGING               VARCHAR(30), FILTER               VARCHAR(200), ORDERBY              VARCHAR(80), CONSTRAINT MASTER_DETAIL_RELATION_PK PRIMARY KEY (CONSTRAINT_NAME), CONSTRAINT MASTER_RELATION FOREIGN KEY (MASTER_TABLE) REFERENCES TABLE_CONTROLLER_STATIC (TABLENAME) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT CHILD_RELATION  FOREIGN KEY (DETAIL_TABLE) REFERENCES TABLE_CONTROLLER_STATIC (TABLENAME) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX MASTER_DETAIL_RELATION_IND1 ON MASTER_DETAIL_RELATION (MASTER_TABLE);
 CREATE INDEX MASTER_DETAIL_RELATION_IND2 ON MASTER_DETAIL_RELATION (DETAIL_TABLE);
 CREATE TABLE NOTIFICATION_TYPE ( NOTIFICATION_TYPE_ID INTEGER       NOT NULL, OWNER_ID             INTEGER       NOT NULL, TABLENAME            VARCHAR(30)   NOT NULL, STATUS_FIELD         VARCHAR(30)   NOT NULL, STOP_VALUE           VARCHAR(30)   NOT NULL, CONSTRAINT NOTIFICATION_TYPE_PK PRIMARY KEY (NOTIFICATION_TYPE_ID) );
 CREATE TABLE USER_NOTIFICATION ( NOTIFICATION_ID      BIGINT        NOT NULL, NOTIFICATION_TYPE_ID INTEGER       NOT NULL, USERNAME             VARCHAR(30)   NOT NULL, OBJECT_ID            VARCHAR(30)   NOT NULL, STATUS               CHAR(1)       NOT NULL, RAISE_DATE           TIMESTAMP     NOT NULL, DUE_DATE             TIMESTAMP     NOT NULL, DESCRIPTION VARCHAR(250), CONSTRAINT USER_NOTIFICATION_PK PRIMARY KEY (NOTIFICATION_ID), CONSTRAINT NOTIFIED_USERS       FOREIGN KEY (NOTIFICATION_TYPE_ID) REFERENCES NOTIFICATION_TYPE (NOTIFICATION_TYPE_ID), CONSTRAINT USER_NOTIFICATIONS   FOREIGN KEY (USERNAME)             REFERENCES USER_ACCOUNT (USERNAME) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX USER_NOTIFICATION_IND1 ON USER_NOTIFICATION (NOTIFICATION_TYPE_ID);
 CREATE INDEX USER_NOTIFICATION_IND2 ON USER_NOTIFICATION (USERNAME);
 CREATE TABLE NOTIFICATION_RECIPIENT ( NOTIFICATION_TYPE_ID INTEGER       NOT NULL, USERNAME             VARCHAR(30)   NOT NULL, EVENT                VARCHAR(10)   NOT NULL, ENABLE               CHAR(1)       NOT NULL, CONSTRAINT NOTIFICATION_RECIPIENT_PK PRIMARY KEY(NOTIFICATION_TYPE_ID, USERNAME, EVENT), CONSTRAINT NOTIFICATION_RECIPIENTS   FOREIGN KEY(NOTIFICATION_TYPE_ID) REFERENCES NOTIFICATION_TYPE (NOTIFICATION_TYPE_ID), CONSTRAINT RECEIVING_NOTIFICATIONS   FOREIGN KEY(USERNAME)             REFERENCES USER_ACCOUNT (USERNAME) );
 CREATE INDEX NOTIFICATION_RECIPIENT_IND1 ON NOTIFICATION_RECIPIENT (USERNAME);
 CREATE TABLE TABLE_VIEW_SCENARIO ( SCENARIO_ID          INTEGER       NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, TABLENAME            VARCHAR(30)   NOT NULL, CONSTRAINT TABLE_VIEW_SCENARIO_PK PRIMARY KEY (SCENARIO_ID) );
 CREATE TABLE TABLE_VIEW_SCENARIO_ITEM ( SCENARIO_ID          INTEGER       NOT NULL, SEQ                  SMALLINT      NOT NULL, FKNAME               VARCHAR(80)   NOT NULL, TABLENAME            VARCHAR(30)   NOT NULL, CAPTION              VARCHAR(80), ACCESS_TYPE          CHAR(1)       NOT NULL, PARENT_SEQ           SMALLINT      NOT NULL, CONSTRAINT TABLE_VIEW_SCENARIO_ITEM_PK PRIMARY KEY(SCENARIO_ID, SEQ), CONSTRAINT TABLE_VIEW_SCENARIO_ITEMS   FOREIGN KEY(SCENARIO_ID) REFERENCES TABLE_VIEW_SCENARIO (SCENARIO_ID) );
 CREATE TABLE TREE_DATA ( NODE_ID              INTEGER       NOT NULL, OWNER_ID             INTEGER       NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, PURPOSE              VARCHAR(20)   NOT NULL, PARENT_ID            INTEGER, CONSTRAINT TREE_DATA_PK  PRIMARY KEY (NODE_ID), CONSTRAINT NODE_CHILDREN FOREIGN KEY (PARENT_ID) REFERENCES TREE_DATA (NODE_ID) );
 CREATE INDEX TREE_DATA_IND1 ON TREE_DATA (PARENT_ID);
 CREATE INDEX TREE_DATA_IND2 ON TREE_DATA (OWNER_ID);
 CREATE TABLE GEO_CITY ( COUNTRY              CHAR(2)        NOT NULL, CITY                 VARCHAR(20)    NOT NULL, CAPTION              VARCHAR(80)    NOT NULL, LONGITUDE            DECIMAL(20,16), LATITUDE             DECIMAL(20,16), ALTITUDE             DECIMAL(20,16), POLYGON              VARCHAR(32000), CONSTRAINT GEO_CITY_PK  PRIMARY KEY (COUNTRY, CITY) );
 CREATE TABLE CONTENT_DATA ( CONTENT_ID           BIGINT        NOT NULL, OWNER_ID             INTEGER       NOT NULL, ORIGINAL_FILE        VARCHAR(250)  NOT NULL, ORIGIN_IP            VARCHAR(32)   NOT NULL, MIMETYPE             VARCHAR(20)   NOT NULL, USERNAME             VARCHAR(30)   NOT NULL, CREATE_TIME          TIMESTAMP     NOT NULL, BINDATA              BLOB, THUMB                BLOB, CONSTRAINT CONTENT_DATA_PK PRIMARY KEY(CONTENT_ID) );
 CREATE INDEX CONTENT_DATA_IND1 ON CONTENT_DATA (OWNER_ID);
 CREATE TABLE CONTENT_RELATION ( OBJECT_TYPE          CHAR(2)       NOT NULL, OBJECT_ID            INTEGER       NOT NULL, CONTENT_ID           BIGINT        NOT NULL, OWNER_ID             INTEGER       NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, PURPOSE              VARCHAR(20)   NOT NULL, PRIORITY             SMALLINT      NOT NULL, USERNAME             VARCHAR(30)   NOT NULL, CREATE_TIME          TIMESTAMP     NOT NULL, CONSTRAINT CONTENT_RELATION_PK PRIMARY KEY(OBJECT_TYPE, OBJECT_ID, CONTENT_ID), CONSTRAINT CONTENT_RELATIONS   FOREIGN KEY(CONTENT_ID) REFERENCES CONTENT_DATA(CONTENT_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX CONTENT_RELATION_IND1 ON CONTENT_RELATION (CONTENT_ID);
 CREATE INDEX CONTENT_RELATION_IND2 ON CONTENT_RELATION (OWNER_ID);
 CREATE TABLE BUSINESS_SERVICE ( BUSINESS_SERVICE_ID  VARCHAR(20)  NOT NULL, CAPTION              VARCHAR(80)  NOT NULL, CONSTRAINT BUSINESS_SERVICE_PK PRIMARY KEY (BUSINESS_SERVICE_ID) );
 CREATE TABLE BUSINESS_SERVICE_PAGE ( BUSINESS_SERVICE_ID  VARCHAR(20)   NOT NULL, PAGENAME             VARCHAR(30)   NOT NULL, CONSTRAINT BUSINESS_SERVICE_PAGE_PK PRIMARY KEY(BUSINESS_SERVICE_ID, PAGENAME), CONSTRAINT BUSINESS_SERVICE_PAGES   FOREIGN KEY(BUSINESS_SERVICE_ID) REFERENCES BUSINESS_SERVICE(BUSINESS_SERVICE_ID), CONSTRAINT PAGE_BUSINESS_SERVICES   FOREIGN KEY(PAGENAME)            REFERENCES SCREEN_PAGE(PAGENAME) );
 CREATE INDEX BUSINESS_SERVICE_PAGE_IND1 ON BUSINESS_SERVICE_PAGE (PAGENAME);
 CREATE TABLE BUSINESS_PARTNER ( BUSINESS_PARTNER_ID  INTEGER      NOT NULL, CAPTION              VARCHAR(80)  NOT NULL, WEB_ADDRESS          VARCHAR(80), HQ_COUNTRY           CHAR(2), TAX_CENTER           VARCHAR(80), TAX_NUMBER           VARCHAR(20), CONSTRAINT BUSINESS_PARTNER_PK PRIMARY KEY (BUSINESS_PARTNER_ID) );
 CREATE TABLE PARTNER_ADDRESS ( BUSINESS_PARTNER_ID  INTEGER       NOT NULL, ADDRESS_ID           SMALLINT      NOT NULL, ADDRESS_TYPE         CHAR(1)       NOT NULL, STREET               VARCHAR(80)   NOT NULL, CITY                 CHAR(2)       NOT NULL, STATE                VARCHAR(20), COUNTRY              CHAR(2)       NOT NULL, PHONE                VARCHAR(20), LONGITUDE            FLOAT, LATITUDE             FLOAT, ALTITUDE             FLOAT, CONSTRAINT PARTNER_ADDRESS_PK PRIMARY KEY (BUSINESS_PARTNER_ID, ADDRESS_ID), CONSTRAINT PARTNER_ADDRESSES FOREIGN KEY (BUSINESS_PARTNER_ID) REFERENCES BUSINESS_PARTNER (BUSINESS_PARTNER_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE PARTNER_CREDIT ( BUSINESS_PARTNER_ID  INTEGER       NOT NULL, CREDIT_TYPE          VARCHAR(20)   NOT NULL, BALANCE              DECIMAL(12,2) NOT NULL, CONSTRAINT PARTNER_CREDIT_PK PRIMARY KEY (BUSINESS_PARTNER_ID, CREDIT_TYPE), CONSTRAINT PARTNER_CREDITS   FOREIGN KEY (BUSINESS_PARTNER_ID) REFERENCES BUSINESS_PARTNER (BUSINESS_PARTNER_ID) );
 CREATE TABLE BUSINESS_OWNER ( BUSINESS_PARTNER_ID  INTEGER     NOT NULL, BEGDA                TIMESTAMP   NOT NULL, CONSTRAINT BUSINESS_OWNER_PK PRIMARY KEY (BUSINESS_PARTNER_ID), CONSTRAINT IS_BUSINESS_OWNER FOREIGN KEY (BUSINESS_PARTNER_ID) REFERENCES BUSINESS_PARTNER (BUSINESS_PARTNER_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE CUSTOMER ( BUSINESS_PARTNER_ID  INTEGER   NOT NULL, BEGDA                TIMESTAMP NOT NULL, CONSTRAINT CUSTOMER_PK PRIMARY KEY (BUSINESS_PARTNER_ID), CONSTRAINT IS_CUSTOMER FOREIGN KEY (BUSINESS_PARTNER_ID) REFERENCES BUSINESS_PARTNER (BUSINESS_PARTNER_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE SUBCONTRACTOR ( BUSINESS_PARTNER_ID  INTEGER     NOT NULL, BEGDA                TIMESTAMP   NOT NULL, EXT_SUBCONTRACTOR    VARCHAR(30), CONSTRAINT SUBCONTRACTOR_PK PRIMARY KEY (BUSINESS_PARTNER_ID), CONSTRAINT IS_SUBCONTRACTOR FOREIGN KEY (BUSINESS_PARTNER_ID) REFERENCES BUSINESS_PARTNER (BUSINESS_PARTNER_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE VENDOR ( BUSINESS_PARTNER_ID  INTEGER     NOT NULL, BEGDA                TIMESTAMP   NOT NULL, APPROVED             CHAR(1)     NOT NULL, CONSTRAINT VENDOR_PK PRIMARY KEY (BUSINESS_PARTNER_ID), CONSTRAINT IS_VENDOR FOREIGN KEY (BUSINESS_PARTNER_ID) REFERENCES BUSINESS_PARTNER (BUSINESS_PARTNER_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE BUSINESS_CONTRACT ( BUSINESS_PARTNER_ID  INTEGER       NOT NULL, BUSINESS_SERVICE_ID  VARCHAR(20)   NOT NULL, BEGDA                TIMESTAMP     NOT NULL, ENDDA                TIMESTAMP     NOT NULL, COST                 FLOAT, DESCRIPTION          VARCHAR(2000), CONSTRAINT BUSINESS_CONTRACT_PK PRIMARY KEY (BUSINESS_PARTNER_ID, BUSINESS_SERVICE_ID, BEGDA), CONSTRAINT SERVICE_BUSINESS_CONTRACTS FOREIGN KEY (BUSINESS_SERVICE_ID) REFERENCES BUSINESS_SERVICE (BUSINESS_SERVICE_ID), CONSTRAINT PARTNER_BUSINESS_CONTRACTS FOREIGN KEY (BUSINESS_PARTNER_ID) REFERENCES BUSINESS_OWNER (BUSINESS_PARTNER_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX BUSINESS_CONTRACT_IND1 ON BUSINESS_CONTRACT (BUSINESS_SERVICE_ID);
 CREATE TABLE APPLICATION_CONFIG ( OWNER_ID             INTEGER       NOT NULL, DOMAIN               VARCHAR(80)   NOT NULL, HOMEPAGE             VARCHAR(80)   NOT NULL, APPLICATION_TITLE    VARCHAR(80)   NOT NULL, INITIAL_CONTENT      VARCHAR(80), INITIAL_SKIN         VARCHAR(80), CONSTRAINT APPLICATION_CONFIG_PK PRIMARY KEY(OWNER_ID), CONSTRAINT IS_APPLICATION_CONFIG FOREIGN KEY(OWNER_ID) REFERENCES BUSINESS_PARTNER(BUSINESS_PARTNER_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX APPLICATION_CONFIG_IND1 ON APPLICATION_CONFIG (OWNER_ID);
 CREATE TABLE PARTNER_CERTIFICATION_TYPE ( CERTIFICATION_TYPE   VARCHAR(30)   NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, ISSUER               VARCHAR(80)   NOT NULL, VALIDATION_ADDRESS   VARCHAR(255)  NOT NULL, VALIDITY             INTEGER       NOT NULL, AREA                 VARCHAR(30)   NOT NULL, CONSTRAINT PARTNER_CERTIFICATION_TYPE_PK PRIMARY KEY(CERTIFICATION_TYPE) );
 CREATE TABLE PARTNER_CERTIFICATION ( PARTNER_CERTIFICATION_ID INTEGER       NOT NULL, BUSINESS_PARTNER_ID      INTEGER       NOT NULL, CERTIFICATION_TYPE       VARCHAR(30)   NOT NULL, ISSUE_DATE               TIMESTAMP     NOT NULL, EXPIRE_DATE              TIMESTAMP     NOT NULL, LEVEL                    VARCHAR(20)   NOT NULL, VALIDATION_KEY           VARCHAR(80)   NOT NULL, CONSTRAINT PARTNER_CERTIFICATION_PK PRIMARY KEY(PARTNER_CERTIFICATION_ID), CONSTRAINT TYPE_CERTIFICATIONS      FOREIGN KEY(CERTIFICATION_TYPE)  REFERENCES PARTNER_CERTIFICATION_TYPE (CERTIFICATION_TYPE), CONSTRAINT PARTNER_CERTIFICATIONS   FOREIGN KEY(BUSINESS_PARTNER_ID) REFERENCES BUSINESS_PARTNER (BUSINESS_PARTNER_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX PARTNER_CERTIFICATION_IND1 ON PARTNER_CERTIFICATION (CERTIFICATION_TYPE);
 CREATE INDEX PARTNER_CERTIFICATION_IND2 ON PARTNER_CERTIFICATION (BUSINESS_PARTNER_ID);
 CREATE TABLE PARTNER_CONVERSATION ( OBJECT_ID                INTEGER       NOT NULL, OBJECT_TYPE              CHAR(2)       NOT NULL, CTIME                    TIMESTAMP     NOT NULL, SEQ                      SMALLINT      NOT NULL, FROM_PARTNER             INTEGER       NOT NULL, TO_PARTNER               INTEGER       NOT NULL, USERNAME                 VARCHAR(30)   NOT NULL, CTEXT                    VARCHAR(250)  NOT NULL, CONSTRAINT PARTNER_CONVERSATION_PK PRIMARY KEY (OBJECT_ID, OBJECT_TYPE, CTIME, SEQ) );
 CREATE TABLE VENDOR_BUSINESS ( BUSINESS_PARTNER_ID      INTEGER       NOT NULL, NODE_ID                  INTEGER       NOT NULL, BEGDA                    TIMESTAMP     NOT NULL, CONSTRAINT VENDOR_BUSINESS_PK PRIMARY KEY (BUSINESS_PARTNER_ID, NODE_ID), CONSTRAINT VENDOR_BUSINESSES  FOREIGN KEY (BUSINESS_PARTNER_ID) REFERENCES VENDOR (BUSINESS_PARTNER_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE TAX_TYPE ( TAX_ID               VARCHAR(8)     NOT NULL, CAPTION              VARCHAR(30)    NOT NULL, COUNTRY              VARCHAR(2)     NOT NULL, RATE                 DECIMAL(8,2)   NOT NULL, CONSTRAINT TAX_TYPE_PK PRIMARY KEY (TAX_ID) );
 CREATE TABLE BANK ( BANK_ID              CHAR(8)       NOT NULL, COUNTRY              CHAR(2)       NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, ROUTING              VARCHAR(20), CONSTRAINT BANK_PK PRIMARY KEY (BANK_ID) );
 CREATE TABLE EXCHANGE_RATE ( CDATE                TIMESTAMP     NOT NULL, CURR1                CHAR(3)       NOT NULL, CURR2                CHAR(3)       NOT NULL, RATE                 DECIMAL(8,4)  NOT NULL, CONSTRAINT EXCHANGE_RATE_PK PRIMARY KEY (CDATE, CURR1, CURR2) );
 CREATE TABLE BANK_BRANCH ( SWIFT                VARCHAR(11)   NOT NULL, BANK_ID              CHAR(8)       NOT NULL, BRANCH_CODE          SMALLINT      NOT NULL, LATITUDE             DECIMAL(25,10), LONGITUDE            DECIMAL(25,10), ALTITUDE             DECIMAL(25,20), STATE                CHAR(2), CITY                 VARCHAR(40), ADDRESS              VARCHAR(80), CONSTRAINT BANK_BRANCH_PK PRIMARY KEY (SWIFT), CONSTRAINT BANK_BRANCHES FOREIGN KEY (BANK_ID) REFERENCES BANK (BANK_ID) );
 CREATE INDEX BANK_BRANCH_IND1 ON BANK_BRANCH (BANK_ID);
 CREATE TABLE ACCOUNT_MASTER ( MASTER_ACCOUNT_CODE  VARCHAR(3)   NOT NULL, CAPTION              VARCHAR(80)  NOT NULL, CONSTRAINT ACCOUNT_MASTER_PK PRIMARY KEY (MASTER_ACCOUNT_CODE) );
 CREATE TABLE ACCOUNT_SCHEMA ( ACCOUNT_SCHEMA_ID    INTEGER       NOT NULL, MASTER_ACCOUNT_CODE  VARCHAR(3)    NOT NULL, OWNER_ID             INTEGER       NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, CODE                 VARCHAR(32)   NOT NULL, ACTIVE               CHAR(1)       NOT NULL, COST_CENTER          INTEGER, DEFAULT_OBJECT_TYPE  CHAR(2), CONSTRAINT ACCOUNT_SCHEMA_PK PRIMARY KEY (ACCOUNT_SCHEMA_ID), CONSTRAINT ACCOUNT_SCHEMAS FOREIGN KEY (MASTER_ACCOUNT_CODE) REFERENCES ACCOUNT_MASTER (MASTER_ACCOUNT_CODE) );
 CREATE INDEX ACCOUNT_SCHEMA_IND1 ON ACCOUNT_SCHEMA (MASTER_ACCOUNT_CODE);
 CREATE INDEX ACCOUNT_SCHEMA_IND2 ON ACCOUNT_SCHEMA (OWNER_ID);
 CREATE TABLE BANK_ACCOUNT ( IBAN                 VARCHAR(22)   NOT NULL, SWIFT                VARCHAR(11)   NOT NULL, OWNER_ID             INTEGER       NOT NULL, CURRENCY             CHAR(3)       NOT NULL, ACCOUNT_NO           VARCHAR(40), ACCOUNT_TYPE         CHAR(1), BALANCE              DECIMAL(12,2), CREDIT_LIMIT         DECIMAL(12,2), CONSTRAINT BANK_ACCOUNT_PK PRIMARY KEY (IBAN), CONSTRAINT BANK_ACCOUNTS FOREIGN KEY (SWIFT) REFERENCES BANK_BRANCH (SWIFT) );
 CREATE INDEX BANK_ACCOUNT_IND1 ON BANK_ACCOUNT (SWIFT);
 CREATE INDEX BANK_ACCOUNT_IND2 ON BANK_ACCOUNT (OWNER_ID);
 CREATE TABLE ACCOUNT_BALANCE ( ACCOUNT_SCHEMA_ID    INTEGER         NOT NULL, CURRENCY             CHAR(3)         NOT NULL, REF_DATE             TIMESTAMP       NOT NULL, REF_YEAR             SMALLINT        NOT NULL, REF_QUARTER          SMALLINT        NOT NULL, REF_MONTH            SMALLINT        NOT NULL, REF_DAY              SMALLINT        NOT NULL, REF_WEEK             SMALLINT        NOT NULL, DEBIT                DECIMAL(12,2)   NOT NULL, CREDIT               DECIMAL(12,2), CONSTRAINT ACCOUNT_BALANCE_PK PRIMARY KEY (ACCOUNT_SCHEMA_ID,CURRENCY,REF_DATE), CONSTRAINT ACCOUNT_BALANCES FOREIGN KEY (ACCOUNT_SCHEMA_ID) REFERENCES ACCOUNT_SCHEMA (ACCOUNT_SCHEMA_ID) );
 CREATE TABLE ACCOUNT_TRANSACTION_TEMPLATE ( TEMPLATE_ID          INTEGER       NOT NULL, OWNER_ID             INTEGER       NOT NULL, CAPTION              VARCHAR(30)   NOT NULL, DOCUMENT_TYPE        CHAR(2)       NOT NULL, CONSTRAINT ACCOUNT_TRANSACTION_TEMPLATE_PK PRIMARY KEY (TEMPLATE_ID) );
 CREATE INDEX ACCOUNT_TRANSACTION_TEMPLATE_IND1 ON ACCOUNT_TRANSACTION_TEMPLATE (OWNER_ID);
 CREATE TABLE ACCOUNT_TX_TEMPLATE_ITEM ( TEMPLATE_ID          INTEGER   NOT NULL, ACCOUNT_SCHEMA_ID    INTEGER   NOT NULL, DEBIT_CREDIT         CHAR(1)   NOT NULL, OBJECT_TYPE          CHAR(2), CONSTRAINT ACCOUNT_TX_TEMPLATE_ITEM_PK   PRIMARY KEY (TEMPLATE_ID,ACCOUNT_SCHEMA_ID), CONSTRAINT ACCOUNT_TX_TEMPLATE_ITEMS     FOREIGN KEY (TEMPLATE_ID)       REFERENCES ACCOUNT_TRANSACTION_TEMPLATE (TEMPLATE_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT ACCOUNT_SCHEMA_TEMPLATE_ITEMS FOREIGN KEY (ACCOUNT_SCHEMA_ID) REFERENCES ACCOUNT_SCHEMA (ACCOUNT_SCHEMA_ID) );
 CREATE INDEX ACCOUNT_TX_TEMPLATE_ITEM_IND1 ON ACCOUNT_TX_TEMPLATE_ITEM (ACCOUNT_SCHEMA_ID);
 CREATE TABLE ACCOUNT_TRANSACTION ( TRANSACTION_ID       BIGINT     NOT NULL, OWNER_ID             INTEGER    NOT NULL, CURRENCY             CHAR(2)    NOT NULL, TX_TIMESTAMP         TIMESTAMP  NOT NULL, TX_YEAR              SMALLINT   NOT NULL, TX_QUARTER           SMALLINT   NOT NULL, TX_MONTH             SMALLINT   NOT NULL, TX_WEEK              SMALLINT   NOT NULL, TX_DAY               SMALLINT   NOT NULL, DOCUMENT_TYPE        CHAR(2), DOCUMENT_ID          INTEGER, REVERSE_TRANSACTION  BIGINT, DESCRIPTION          VARCHAR(200), CONSTRAINT ACCOUNT_TRANSACTION_PK PRIMARY KEY (TRANSACTION_ID) );
 CREATE INDEX ACCOUNT_TRANSACTION_IND1 ON ACCOUNT_TRANSACTION (OWNER_ID);
 CREATE TABLE ACCOUNT_TRANSACTION_ITEM ( TRANSACTION_ID       BIGINT          NOT NULL, ACCOUNT_SCHEMA_ID    INTEGER         NOT NULL, DEBIT                DECIMAL(12,2)   NOT NULL, CREDIT               DECIMAL(12,2)   NOT NULL, OBJECT_TYPE          CHAR(2)         NOT NULL, OBJECT_ID            INTEGER         NOT NULL, CONSTRAINT ACCOUNT_TRANSACTION_ITEM_PK PRIMARY KEY (TRANSACTION_ID,ACCOUNT_SCHEMA_ID), CONSTRAINT ACCOUNT_TRANSACTION_ITEMS   FOREIGN KEY (TRANSACTION_ID)    REFERENCES ACCOUNT_TRANSACTION (TRANSACTION_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT ACCOUNT_SCHEMA_TRANSACTIONS FOREIGN KEY (ACCOUNT_SCHEMA_ID) REFERENCES ACCOUNT_SCHEMA (ACCOUNT_SCHEMA_ID) );
 CREATE INDEX ACCOUNT_TRANSACTION_ITEM_IND1 ON ACCOUNT_TRANSACTION_ITEM (ACCOUNT_SCHEMA_ID);
 CREATE TABLE PERSON ( PERSON_ID            INTEGER        NOT NULL, FIRST_NAME           VARCHAR (40)   NOT NULL, MIDDLE_NAME          VARCHAR (40), LAST_NAME            VARCHAR (40)   NOT NULL, BIRTHDAY             TIMESTAMP      NOT NULL, GENDER               CHAR (1)       NOT NULL, NATIONALITY          CHAR (2)       NOT NULL, GOVERNMENT_ID        VARCHAR (20), PERSONAL_MAIL        VARCHAR (80), CELL_PHONE           VARCHAR (20), CONSTRAINT PERSON_PK PRIMARY KEY (PERSON_ID) );
 CREATE TABLE CREDIT_CARD ( CARD_NUMBER          CHAR(24)     NOT NULL, CVC2                 VARCHAR(3)   NOT NULL, EXPIRE_YEAR          SMALLINT     NOT NULL, EXPIRE_MONTH         SMALLINT     NOT NULL, NAME_ON_CARD         VARCHAR(80)  NOT NULL, PERSON_ID            INTEGER      NOT NULL, CONSTRAINT CREDIT_CARD_PK PRIMARY KEY (CARD_NUMBER), CONSTRAINT CREDIT_CARDS FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX CREDIT_CARD_IND1 ON CREDIT_CARD (PERSON_ID);
 CREATE TABLE QUALIFICATION ( QUALIFICATION_ID     INTEGER          NOT NULL, QUALIFICATION_TYPE   VARCHAR (12)     NOT NULL, CAPTION              VARCHAR (80)     NOT NULL, GRADE_BASE           DECIMAL (10,2)   NOT NULL, VALIDITY             INTEGER, CONSTRAINT QUALIFICATION_PK PRIMARY KEY (QUALIFICATION_ID) );
 CREATE TABLE USER_ACCOUNT_OWNER ( USERNAME             VARCHAR (30)   NOT NULL, PERSON_ID            INTEGER        NOT NULL, BEGDA                TIMESTAMP      NOT NULL, CONSTRAINT USER_ACCOUNT_OWNER_PK PRIMARY KEY (USERNAME, PERSON_ID, BEGDA), CONSTRAINT USER_ACCOUNTS_OWNERS  FOREIGN KEY (USERNAME)  REFERENCES USER_ACCOUNT (USERNAME), CONSTRAINT PERSONS_USER_ACCOUNTS FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX USER_ACCOUNT_OWNER_IND1 ON USER_ACCOUNT_OWNER (PERSON_ID);
 CREATE TABLE ORGANIZATION ( ORGANIZATION_ID      INTEGER        NOT NULL, OWNER_ID             INTEGER        NOT NULL, ORGANIZATION_TYPE    CHAR (2)       NOT NULL, ADDRESS_ID           SMALLINT       NOT NULL, CAPTION              VARCHAR (80)   NOT NULL, PARENT_ID            INTEGER, CONSTRAINT ORGANIZATION_PK       PRIMARY KEY (ORGANIZATION_ID), CONSTRAINT CHILD_ORGANIZATIONS   FOREIGN KEY (PARENT_ID) REFERENCES ORGANIZATION (ORGANIZATION_ID), CONSTRAINT ADDRESS_ORGANIZATIONS FOREIGN KEY (OWNER_ID, ADDRESS_ID) REFERENCES PARTNER_ADDRESS (BUSINESS_PARTNER_ID, ADDRESS_ID) );
 CREATE INDEX ORGANIZATION_IND1 ON ORGANIZATION (PARENT_ID);
 CREATE INDEX ORGANIZATION_IND2 ON ORGANIZATION (OWNER_ID, ADDRESS_ID);
 CREATE TABLE EMPLOYEE ( PERSON_ID            INTEGER       NOT NULL, EMPLOYMENT           TIMESTAMP     NOT NULL, OWNER_ID             INTEGER       NOT NULL, POSITION             VARCHAR (20), EMAIL_ADDRESS        VARCHAR (80), WORK_PHONE           VARCHAR (20), CELL_PHONE           VARCHAR (20), DEPARTURE            TIMESTAMP, DEPARTURE_TYPE       CHAR (1), CONSTRAINT EMPLOYEE_PK         PRIMARY KEY (PERSON_ID, EMPLOYMENT), CONSTRAINT PERSONS_EMPLOYMENTS FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID) );
 CREATE INDEX BUSINESS_EMPLOYEE_IND1 ON EMPLOYEE (OWNER_ID);
 CREATE TABLE PERSON_QUALIFICATION ( PERSON_ID            INTEGER         NOT NULL, QUALIFICATION_ID     INTEGER         NOT NULL, BEGDA                TIMESTAMP       NOT NULL, ENDDA                TIMESTAMP, GRADE                DECIMAL (10,2), ISSUER               VARCHAR (80), DEPARTMENT           VARCHAR (80), CONSTRAINT PERSON_QUALIFICATION_PK PRIMARY KEY (PERSON_ID, QUALIFICATION_ID, BEGDA), CONSTRAINT PERSON_QUALIFICATIONS   FOREIGN KEY (PERSON_ID) REFERENCES PERSON (PERSON_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT QUALIFIED_PERSONNEL     FOREIGN KEY (QUALIFICATION_ID) REFERENCES QUALIFICATION (QUALIFICATION_ID) );
 CREATE INDEX PERSON_QUALIFICATION_IND1 ON PERSON_QUALIFICATION (QUALIFICATION_ID);
 CREATE TABLE POSITION_TYPE ( OWNER_ID             INTEGER        NOT NULL, POSITION             VARCHAR (20)   NOT NULL, CAPTION              VARCHAR (80)   NOT NULL, CONSTRAINT POSITION_TYPE_PK PRIMARY KEY (OWNER_ID, POSITION) );
 CREATE TABLE POSITION ( OWNER_ID             INTEGER        NOT NULL, ORGANIZATION_ID      INTEGER        NOT NULL, POSITION             VARCHAR (20)   NOT NULL, BEGDA                TIMESTAMP      NOT NULL, ENDDA                TIMESTAMP      NOT NULL, CONSTRAINT POSITION_PK    PRIMARY KEY (OWNER_ID, ORGANIZATION_ID, POSITION), CONSTRAINT POSITIONS      FOREIGN KEY (ORGANIZATION_ID)    REFERENCES ORGANIZATION (ORGANIZATION_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT TYPE_POSITIONS FOREIGN KEY (OWNER_ID, POSITION) REFERENCES POSITION_TYPE (OWNER_ID, POSITION) );
 CREATE INDEX POSITION_IND1 ON POSITION (ORGANIZATION_ID);
 CREATE INDEX POSITION_IND2 ON POSITION (OWNER_ID, POSITION);
 CREATE TABLE POSITION_QUALIFICATION ( OWNER_ID             INTEGER          NOT NULL, ORGANIZATION_ID      INTEGER          NOT NULL, POSITION             VARCHAR (20)     NOT NULL, QUALIFICATION_ID     INTEGER          NOT NULL, GRADE                DECIMAL (10,2)   NOT NULL, PRIORITY             CHAR (1)         NOT NULL, IMPACT_PERCENT       SMALLINT         NOT NULL, CONSTRAINT POSITION_QUALIFICATION_PK PRIMARY KEY (OWNER_ID, ORGANIZATION_ID, POSITION, QUALIFICATION_ID), CONSTRAINT QUALIFIED_POSITIONS       FOREIGN KEY (QUALIFICATION_ID)                    REFERENCES QUALIFICATION (QUALIFICATION_ID), CONSTRAINT REQUIRED_QUALIFICATIONS   FOREIGN KEY (OWNER_ID, ORGANIZATION_ID, POSITION) REFERENCES POSITION (OWNER_ID, ORGANIZATION_ID, POSITION) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX POSITION_QUALIFICATION_IND1 ON POSITION_QUALIFICATION (QUALIFICATION_ID);
 CREATE TABLE POSITION_ASSIGNMENT ( OWNER_ID             INTEGER        NOT NULL, ORGANIZATION_ID      INTEGER        NOT NULL, POSITION             VARCHAR (20)   NOT NULL, PERSON_ID            INTEGER        NOT NULL, EMPLOYMENT           TIMESTAMP      NOT NULL, BEGDA                TIMESTAMP      NOT NULL, ENDDA                TIMESTAMP, REASON               CHAR (1)       NOT NULL, ASSIGNMENT_TYPE      CHAR (1)       NOT NULL, CONSTRAINT POSITION_ASSIGNMENT_PK PRIMARY KEY (OWNER_ID, ORGANIZATION_ID, POSITION, PERSON_ID, EMPLOYMENT, BEGDA), CONSTRAINT ASSIGNED_PERSONNEL     FOREIGN KEY (OWNER_ID, ORGANIZATION_ID, POSITION) REFERENCES POSITION (OWNER_ID, ORGANIZATION_ID, POSITION), CONSTRAINT POSITION_ASSIGNMENTS   FOREIGN KEY (PERSON_ID, EMPLOYMENT)               REFERENCES EMPLOYEE (PERSON_ID, EMPLOYMENT) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX POSITION_ASSIGNMENT_IND1 ON POSITION_ASSIGNMENT (PERSON_ID, EMPLOYMENT);
 CREATE TABLE MANUFACTURER ( MANUFACTURER_ID      VARCHAR(30)   NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, CONSTRAINT MANUFACTURER_PK PRIMARY KEY (MANUFACTURER_ID) );
 CREATE TABLE MATERIAL_TYPE ( MATERIAL_TYPE_ID     VARCHAR(30)   NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, UNIT                 VARCHAR(3)    NOT NULL, MASTER               INTEGER, LOGO                 VARCHAR(80), CONSTRAINT MATERIAL_TYPE_PK PRIMARY KEY (MATERIAL_TYPE_ID) );
 CREATE TABLE MATERIAL_ATTRIBUTE_GROUP ( MAG_ID               VARCHAR(8)   NOT NULL, OWNER_ID             INTEGER      NOT NULL, CAPTION              VARCHAR(30)  NOT NULL, CONSTRAINT MATERIAL_ATTRIBUTE_GROUP_PK PRIMARY KEY (MAG_ID) );
 CREATE INDEX MATERIAL_ATTRIBUTE_GROUP_IND1 ON MATERIAL_ATTRIBUTE_GROUP (OWNER_ID);
 CREATE TABLE MATERIAL_ATTRIBUTE_OPTION ( MAG_ID               VARCHAR(8)   NOT NULL, LOW                  VARCHAR(8)   NOT NULL, HIGH                 VARCHAR(8), CAPTION              VARCHAR(30)   NOT NULL, CONSTRAINT MATERIAL_ATTRIBUTE_OPTION_PK PRIMARY KEY (MAG_ID, LOW), CONSTRAINT MATERIAL_ATTRIBUTE_OPTIONS FOREIGN KEY (MAG_ID) REFERENCES MATERIAL_ATTRIBUTE_GROUP (MAG_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX MATERIAL_ATTRIBUTE_OPTION_IND1 ON MATERIAL_ATTRIBUTE_OPTION (MAG_ID);
 CREATE TABLE MATERIAL_TYPE_ATTRIBUTE ( MATERIAL_TYPE_ID     VARCHAR(30)   NOT NULL, MAG_ID               VARCHAR(8)    NOT NULL, MANDATORY            CHAR(1)       NOT NULL, DEFAULT_VALUE        VARCHAR(8), CONSTRAINT MATERIAL_TYPE_ATTRIBUTE_PK     PRIMARY KEY(MATERIAL_TYPE_ID, MAG_ID), CONSTRAINT MATERIAL_TYPE_ATTRIBUTES       FOREIGN KEY(MATERIAL_TYPE_ID) REFERENCES MATERIAL_TYPE (MATERIAL_TYPE_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT ATTRIBUTE_GROUP_MATERIAL_TYPES FOREIGN KEY(MAG_ID)           REFERENCES MATERIAL_ATTRIBUTE_GROUP (MAG_ID) );
 CREATE INDEX MATERIAL_TYPE_ATTRIBUTE_IND1 ON MATERIAL_TYPE_ATTRIBUTE (MAG_ID);
 CREATE TABLE MATERIAL_GROUP ( MATERIAL_GROUP_ID    INTEGER       NOT NULL, OWNER_ID             INTEGER       NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, PURPOSE              VARCHAR(20)   NOT NULL, PARENT_ID            INTEGER, CONSTRAINT MATERIAL_GROUP_PK PRIMARY KEY(MATERIAL_GROUP_ID), CONSTRAINT MATERIAL_GROUPS   FOREIGN KEY(PARENT_ID) REFERENCES MATERIAL_GROUP(MATERIAL_GROUP_ID) );
 CREATE INDEX MATERIAL_GROUP_IND1 ON MATERIAL_GROUP (PARENT_ID);
 CREATE INDEX MATERIAL_GROUP_IND2 ON MATERIAL_GROUP (OWNER_ID);
 CREATE TABLE MATERIAL ( MATERIAL_ID          INTEGER       NOT NULL, OWNER_ID             INTEGER       NOT NULL, MATERIAL_TYPE_ID     VARCHAR(30)   NOT NULL, MANUFACTURER_ID      VARCHAR(30), CAPTION              VARCHAR(80)   NOT NULL, DEFAULT_UNIT         VARCHAR(3)    NOT NULL, PURCHASE_UNIT        VARCHAR(8), ISSUE_TYPE           CHAR(1), ISSUE_UNIT           VARCHAR(8), SHELF_LIFE           SMALLINT, COST_METHOD          VARCHAR(8), COST                 DECIMAL(10,2), EQUIPMENT            CHAR(1), PART_NUMBER          VARCHAR(30), STATUS               CHAR(1), CONSTRAINT MATERIAL_PK            PRIMARY KEY (MATERIAL_ID), CONSTRAINT MANUFACTURED_MATERIALS FOREIGN KEY (MANUFACTURER_ID) REFERENCES MANUFACTURER (MANUFACTURER_ID), CONSTRAINT MATERIALS              FOREIGN KEY (MATERIAL_TYPE_ID) REFERENCES MATERIAL_TYPE (MATERIAL_TYPE_ID) );
 CREATE INDEX MATERIAL_IND1 ON MATERIAL (MANUFACTURER_ID);
 CREATE INDEX MATERIAL_IND2 ON MATERIAL (OWNER_ID);
 CREATE INDEX MATERIAL_IND3 ON MATERIAL (MATERIAL_TYPE_ID);
 CREATE TABLE MATERIAL_ATTRIBUTE ( MATERIAL_ID          INTEGER      NOT NULL, MAG_ID               VARCHAR(8)   NOT NULL, VALUE                VARCHAR(8)   NOT NULL, CONSTRAINT MATERIAL_ATTRIBUTE_PK     PRIMARY KEY (MATERIAL_ID, MAG_ID), CONSTRAINT MATERIAL_ATTRIBUTES       FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (MATERIAL_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT ATTRIBUTE_GROUP_MATERIALS FOREIGN KEY (MAG_ID)      REFERENCES MATERIAL_ATTRIBUTE_GROUP (MAG_ID) );
 CREATE INDEX MATERIAL_ATTRIBUTE_IND3 ON MATERIAL_ATTRIBUTE (MAG_ID, VALUE);
 CREATE TABLE MATERIAL_GROUP_ASSIGNMENT ( MATERIAL_GROUP_ID    INTEGER     NOT NULL, MATERIAL_ID          INTEGER     NOT NULL, BEGDA                TIMESTAMP   NOT NULL, CONSTRAINT MATERIAL_GROUP_ASSIGNMENT_PK PRIMARY KEY(MATERIAL_GROUP_ID, MATERIAL_ID), CONSTRAINT GROUP_MATERIAL_ASSIGNMENTS   FOREIGN KEY(MATERIAL_GROUP_ID) REFERENCES MATERIAL_GROUP (MATERIAL_GROUP_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT MATERIAL_GROUP_ASSIGNMENTS   FOREIGN KEY(MATERIAL_ID)       REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE INDEX MATERIAL_GROUP_ASSIGNMENT_IND1 ON MATERIAL_GROUP_ASSIGNMENT (MATERIAL_ID);
 CREATE TABLE MATERIAL_INVENTORY ( ORGANIZATION_ID      INTEGER         NOT NULL, MATERIAL_ID          INTEGER         NOT NULL, QUANTITY             DECIMAL(10,2)   NOT NULL, UNIT                 VARCHAR(3)      NOT NULL, RESERVED             DECIMAL(10,2), RESERVE_UNIT         VARCHAR(3), COST                 DECIMAL(10,2), CONSTRAINT MATERIAL_INVENTORY_PK     PRIMARY KEY (ORGANIZATION_ID, MATERIAL_ID), CONSTRAINT MATERIAL_INVENTORIES      FOREIGN KEY (MATERIAL_ID)     REFERENCES MATERIAL (MATERIAL_ID), CONSTRAINT ORGANIZATIONS_INVENTORIES FOREIGN KEY (ORGANIZATION_ID) REFERENCES ORGANIZATION (ORGANIZATION_ID) );
 CREATE INDEX MATERIAL_INVENTORY_IND1 ON MATERIAL_INVENTORY (ORGANIZATION_ID);
 CREATE TABLE LOT_INVENTORY ( ORGANIZATION_ID      INTEGER         NOT NULL, MATERIAL_ID          INTEGER         NOT NULL, LOT_ID               VARCHAR(10)     NOT NULL, QUANTITY             DECIMAL(10,2)   NOT NULL, BEGDA                TIMESTAMP       NOT NULL, CONSTRAINT LOT_INVENTORY_PK PRIMARY KEY (ORGANIZATION_ID, MATERIAL_ID, LOT_ID), CONSTRAINT LOT_INVENTORIES  FOREIGN KEY (ORGANIZATION_ID, MATERIAL_ID) REFERENCES MATERIAL_INVENTORY (ORGANIZATION_ID, MATERIAL_ID) );
 CREATE TABLE MATERIAL_INVENTORY_HISTORY ( ORGANIZATION_ID      INTEGER     NOT NULL, MATERIAL_ID          INTEGER     NOT NULL, PERIOD_END           TIMESTAMP   NOT NULL, YEAR                 SMALLINT, QUARTER              SMALLINT, MONTH                SMALLINT, WEEK                 SMALLINT, CONSTRAINT MATERIAL_INVENTORY_HISTORY_PK PRIMARY KEY (ORGANIZATION_ID, MATERIAL_ID, PERIOD_END), CONSTRAINT MATERIAL_INVENTORY_HISTORIES  FOREIGN KEY (MATERIAL_ID)     REFERENCES MATERIAL (MATERIAL_ID), CONSTRAINT ORGANIZATION_INVNT_HISTORIES  FOREIGN KEY (ORGANIZATION_ID) REFERENCES ORGANIZATION (ORGANIZATION_ID) );
 CREATE INDEX MATERIAL_INVENTORY_HISTORY_IND1 ON MATERIAL_INVENTORY_HISTORY (MATERIAL_ID);
 CREATE TABLE MATERIAL_MOVEMENT ( MM_TX_ID             BIGINT          NOT NULL, MATERIAL_ID          INTEGER         NOT NULL, MOVE_TYPE            SMALLINT        NOT NULL, BEGDA                TIMESTAMP       NOT NULL, QUANTITY             DECIMAL(10,2)   NOT NULL, UNIT                 VARCHAR(3)      NOT NULL, USERNAME             VARCHAR(30)     NOT NULL, ORDER_TYPE           CHAR(1), ORDER_ID             INTEGER, REVERSED             CHAR(1), REVERS_TX_ID         INTEGER, FROM_TYPE            CHAR(1), FROM_ID              INTEGER, TO_TYPE              CHAR(1), TO_ID                INTEGER, CONSTRAINT MATERIAL_MOVEMENT_PK PRIMARY KEY (MM_TX_ID), CONSTRAINT MATERIAL_MOVEMENTS   FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE INDEX MATERIAL_MOVEMENT_IND1 ON MATERIAL_MOVEMENT (MATERIAL_ID);
 CREATE TABLE MATERIAL_PACK_UNIT ( MATERIAL_ID          INTEGER         NOT NULL, PACK                 VARCHAR(8)      NOT NULL, QUANTITY             DECIMAL(10,2)   NOT NULL, UNIT                 VARCHAR(3)      NOT NULL, CONSTRAINT MATERIAL_PACK_UNIT_PK PRIMARY KEY (MATERIAL_ID, PACK), CONSTRAINT MATERIAL_PACK_UNITS   FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (MATERIAL_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE MATERIAL_RESERVATION ( RESERVATION_ID       INTEGER         NOT NULL, MATERIAL_ID          INTEGER         NOT NULL, BEGDA                TIMESTAMP       NOT NULL, STATUS               CHAR(1)         NOT NULL, QUANTITY             DECIMAL(10,2)   NOT NULL, UNIT                 VARCHAR(3)      NOT NULL, ORDER_TYPE           CHAR(1)         NOT NULL, ORDER_ID             INTEGER         NOT NULL, CONSTRAINT MATERIAL_RESERVATION_PK PRIMARY KEY (RESERVATION_ID), CONSTRAINT MATERIAL_RESERVATIONS FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE INDEX MATERIAL_RESERVATION_IND1 ON MATERIAL_RESERVATION (MATERIAL_ID);
 CREATE TABLE MATERIAL_SALE_PRICE ( MATERIAL_ID          INTEGER         NOT NULL, BEGDA                TIMESTAMP       NOT NULL, ENDDA                TIMESTAMP       NOT NULL, PRICE                DECIMAL(10,2)   NOT NULL, CONSTRAINT MATERIAL_SALE_PRICE_PK PRIMARY KEY (MATERIAL_ID, BEGDA), CONSTRAINT MATERIAL_SALE_PRICES   FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE TABLE MATERIAL_SALE_TAX ( MATERIAL_ID          INTEGER        NOT NULL, BEGDA                TIMESTAMP      NOT NULL, TAX_ID               VARCHAR(8)     NOT NULL, ENDDA                TIMESTAMP      NOT NULL, RATE                 DECIMAL(8,2)   NOT NULL, CONSTRAINT MATERIAL_SALE_TAX_PK PRIMARY KEY (MATERIAL_ID, BEGDA, TAX_ID), CONSTRAINT MATERIAL_SALE_TAXES  FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (MATERIAL_ID), CONSTRAINT TAX_MATERIAL_SALES   FOREIGN KEY (TAX_ID)      REFERENCES TAX_TYPE (TAX_ID) );
 CREATE TABLE SALES_ORDER ( SALES_ORDER_ID       INTEGER       NOT NULL, OWNER_ID             INTEGER       NOT NULL, CUSTOMER_ID          INTEGER       NOT NULL, ORDER_DATE           TIMESTAMP     NOT NULL, DUE_DATE             TIMESTAMP, STATUS               CHAR(1)       NOT NULL, USERNAME             VARCHAR(30), DESCRIPTION          VARCHAR(250), DISCOUNT             DECIMAL(10,2), ADVANCE_PAYMENT      DECIMAL(10,2), ONLINE_ORDER         CHAR(1), CONSTRAINT SALES_ORDER_PK         PRIMARY KEY (SALES_ORDER_ID), CONSTRAINT CUSTOMER_SALES_ORDERS  FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER (BUSINESS_PARTNER_ID) );
 CREATE INDEX SALES_ORDER_IND1 ON SALES_ORDER (OWNER_ID);
 CREATE TABLE SALES_DELIVERY_ADDRESS ( SALES_ORDER_ID       INTEGER       NOT NULL, ADDRESS              VARCHAR(80)   NOT NULL, CITY                 VARCHAR(20)   NOT NULL, STATE                VARCHAR(2), COUNTRY              VARCHAR(2), LONGITUDE            FLOAT, LATITUDE             FLOAT, ALTITUDE             FLOAT, CONSTRAINT SALES_DELIVERY_ADDRESS_PK PRIMARY KEY (SALES_ORDER_ID), CONSTRAINT SALES_DELIVERY_ADDRESSES  FOREIGN KEY (SALES_ORDER_ID) REFERENCES SALES_ORDER (SALES_ORDER_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE SALES_ORDER_ITEM ( SALES_ORDER_ID       INTEGER         NOT NULL, LINE                 SMALLINT        NOT NULL, MATERIAL_ID          INTEGER         NOT NULL, QUANTITY             DECIMAL(10,2)   NOT NULL, UNIT                 VARCHAR(3)      NOT NULL, UNIT_PRICE           DECIMAL(10,2), DISCOUNT             DECIMAL(10,2), CURRENCY             VARCHAR(3), STATUS               CHAR(1), CONSTRAINT SALES_ORDER_ITEM_PK   PRIMARY KEY (SALES_ORDER_ID, LINE), CONSTRAINT SALES_ORDER_ITEMS     FOREIGN KEY (SALES_ORDER_ID) REFERENCES SALES_ORDER (SALES_ORDER_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT MATERIAL_SALES_ORDERS FOREIGN KEY (MATERIAL_ID)    REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE INDEX SALES_ORDER_ITEM_IND2 ON SALES_ORDER_ITEM (MATERIAL_ID);
 CREATE TABLE SALES_ORDER_ITEM_ATTR ( SALES_ORDER_ID       INTEGER      NOT NULL, LINE                 SMALLINT     NOT NULL, MAG_ID               VARCHAR(8)   NOT NULL, VALUE                VARCHAR(8)   NOT NULL, CONSTRAINT SALES_ORDER_ITEM_ATTR_PK     PRIMARY KEY (SALES_ORDER_ID, LINE, MAG_ID), CONSTRAINT SALES_ORDER_ITEM_ATTRS       FOREIGN KEY (LINE, SALES_ORDER_ID)   REFERENCES SALES_ORDER_ITEM (LINE, SALES_ORDER_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT ATTRIBUTE_GROUP_SALES_ORDERS FOREIGN KEY (MAG_ID)                 REFERENCES MATERIAL_ATTRIBUTE_GROUP (MAG_ID) );
 CREATE INDEX SALES_ORDER_ITEM_ATTR_IND3 ON SALES_ORDER_ITEM_ATTR (MAG_ID);
 CREATE TABLE SALES_ORDER_TAX ( SALES_ORDER_ID       INTEGER         NOT NULL, LINE                 SMALLINT        NOT NULL, TAX_ID               VARCHAR(8)      NOT NULL, AMOUNT               DECIMAL(10,2)   NOT NULL, CONSTRAINT SALES_ORDER_TAX_PK PRIMARY KEY (SALES_ORDER_ID, LINE, TAX_ID), CONSTRAINT SALES_ORDER_TAXES  FOREIGN KEY (SALES_ORDER_ID, LINE) REFERENCES SALES_ORDER_ITEM (SALES_ORDER_ID, LINE) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE PRODUCT_PRICE_COMMITMENT ( MATERIAL_ID          INTEGER         NOT NULL, BUSINESS_PARTNER_ID  INTEGER         NOT NULL, ORDER_DEAD_LINE      TIMESTAMP       NOT NULL, OWNER_ID             INTEGER         NOT NULL, DELIVERY_PROMISE     TIMESTAMP       NOT NULL, MIN_QUANTITY         INTEGER         NOT NULL, MAX_QUANTITY         INTEGER         NOT NULL, BOX_QUANTITY         INTEGER         NOT NULL, UNIT                 VARCHAR(3)      NOT NULL, START_PRICE          DECIMAL(12,2)   NOT NULL, GOAL_PRICE           DECIMAL(12,2)   NOT NULL, CURRENCY             CHAR(3)         NOT NULL, PRICING              CHAR(1)         NOT NULL, CURRENT_ORDER        INTEGER         NOT NULL, CURRENT_PRICE        DECIMAL(12,2)   NOT NULL, EARLY_BIRD_PCT       DECIMAL(3,2)    NOT NULL, STATUS               CHAR(1)         NOT NULL, CONSTRAINT PRODUCT_PRICE_COMMITMENT_PK PRIMARY KEY (MATERIAL_ID, BUSINESS_PARTNER_ID, ORDER_DEAD_LINE), CONSTRAINT VENDOR_PRICE_COMMITMENTS    FOREIGN KEY (BUSINESS_PARTNER_ID) REFERENCES VENDOR (BUSINESS_PARTNER_ID), CONSTRAINT MATERIAL_PRICE_COMMITMENTS  FOREIGN KEY (MATERIAL_ID)         REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE INDEX PRODUCT_PRICE_COMMITMENT_IND1 ON PRODUCT_PRICE_COMMITMENT (BUSINESS_PARTNER_ID);
 CREATE TABLE PRODUCT_PRICE_COMMITMENT_ITEM ( MATERIAL_ID          INTEGER         NOT NULL, BUSINESS_PARTNER_ID  INTEGER         NOT NULL, ORDER_DEAD_LINE      TIMESTAMP       NOT NULL, QUANTITY             DECIMAL(10,2)   NOT NULL, PRICE                DECIMAL(10,2)   NOT NULL, CONSTRAINT PRODUCT_PRICE_COMMITMENT_ITEM_PK PRIMARY KEY (MATERIAL_ID, BUSINESS_PARTNER_ID, ORDER_DEAD_LINE, QUANTITY), CONSTRAINT PRODUCT_PRICE_COMMITMENT_ITEMS   FOREIGN KEY (MATERIAL_ID, BUSINESS_PARTNER_ID, ORDER_DEAD_LINE) REFERENCES PRODUCT_PRICE_COMMITMENT (MATERIAL_ID, BUSINESS_PARTNER_ID, ORDER_DEAD_LINE) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE SALES_ORDER_COMMITMENT ( MATERIAL_ID          INTEGER         NOT NULL, BUSINESS_PARTNER_ID  INTEGER         NOT NULL, ORDER_DEAD_LINE      TIMESTAMP       NOT NULL, SALES_ORDER_ID       INTEGER         NOT NULL, LINE                 SMALLINT        NOT NULL, INITIAL_SEQUENCE     INTEGER         NOT NULL, INITIAL_PRICE        DECIMAL(12,2)   NOT NULL, ORDER_REFUND         DECIMAL(12,2)   NOT NULL, REFUND_DECISION      CHAR(1)         NOT NULL, REFUND_STATUS        CHAR(1)         NOT NULL, CONSTRAINT SALES_ORDER_COMMITMENT_PK PRIMARY KEY(MATERIAL_ID, BUSINESS_PARTNER_ID, ORDER_DEAD_LINE, SALES_ORDER_ID, LINE, INITIAL_SEQUENCE), CONSTRAINT COMMITMENT_SALES_ORDERS   FOREIGN KEY(MATERIAL_ID, BUSINESS_PARTNER_ID, ORDER_DEAD_LINE) REFERENCES PRODUCT_PRICE_COMMITMENT(MATERIAL_ID, BUSINESS_PARTNER_ID, ORDER_DEAD_LINE), CONSTRAINT SALES_ORDER_COMMITMENTS   FOREIGN KEY(SALES_ORDER_ID, LINE)                              REFERENCES SALES_ORDER_ITEM(SALES_ORDER_ID, LINE) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX SALES_ORDER_COMMITMENT_IND1 ON SALES_ORDER_COMMITMENT (SALES_ORDER_ID, LINE);
 CREATE TABLE SALES_CAMPAIGN ( SALES_CAMPAIGN_ID    INTEGER      NOT NULL, OWNER_ID             INTEGER      NOT NULL, CAPTION              VARCHAR(80)  NOT NULL, BEGDA                TIMESTAMP    NOT NULL, ENDDA                TIMESTAMP    NOT NULL, DISCOUNT_TYPE        CHAR(1)      NOT NULL, QUANTITY_THRESHOLD   SMALLINT, DISCOUNT_PERCENT     SMALLINT, DISCOUNT_QUANTITY    SMALLINT, SALE_THRESHOLD       DECIMAL(12,2), DISCOUNT_AMOUNT      DECIMAL(12,2), CONSTRAINT SALES_CAMPAIGN_PK PRIMARY KEY (SALES_CAMPAIGN_ID) );
 CREATE TABLE SALES_CAMPAIGN_ITEM ( SALES_CAMPAIGN_ID    INTEGER       NOT NULL, MATERIAL_ID          INTEGER       NOT NULL, PRICE                DECIMAL(12,2) NOT NULL, CONSTRAINT SALES_CAMPAIGN_ITEM_PK    PRIMARY KEY (SALES_CAMPAIGN_ID, MATERIAL_ID), CONSTRAINT SALES_CAMPAIGN_ITEMS      FOREIGN KEY (SALES_CAMPAIGN_ID) REFERENCES SALES_CAMPAIGN (SALES_CAMPAIGN_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT MATERIALS_SALES_CAMPAIGNS FOREIGN KEY (MATERIAL_ID)       REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE INDEX SALES_CAMPAIGN_ITEM_IND1 ON SALES_CAMPAIGN_ITEM (MATERIAL_ID);
 CREATE TABLE SALES_ACCOUNT_BALANCE ( OWNER_ID             INTEGER         NOT NULL, REFUND               DECIMAL(12,2)   NOT NULL, TOTAL_SALE           DECIMAL(12,2)   NOT NULL, TOTAL_PURCHASE       DECIMAL(12,2)   NOT NULL, PROVISION            DECIMAL(12,2)   NOT NULL, CONSTRAINT SALES_ACCOUNT_BALANCE_PK PRIMARY KEY(OWNER_ID), CONSTRAINT SALES_ACCOUNT_BALANCES FOREIGN KEY(OWNER_ID) REFERENCES BUSINESS_PARTNER(BUSINESS_PARTNER_ID) );
 CREATE VIEW V_PRODUCTION_COMMITMENT AS SELECT C.MATERIAL_ID, M.MANUFACTURER_ID, C.BUSINESS_PARTNER_ID, C.OWNER_ID, M.CAPTION, B.CAPTION AS VENDOR_CAPTION, M.PART_NUMBER, C.ORDER_DEAD_LINE, C.DELIVERY_PROMISE, C.MIN_QUANTITY, C.MAX_QUANTITY, C.UNIT, C.START_PRICE, C.CURRENCY, C.CURRENT_ORDER, C.CURRENT_PRICE, I.QUANTITY, I.PRICE, C.STATUS FROM PRODUCT_PRICE_COMMITMENT C, MATERIAL M, PRODUCT_PRICE_COMMITMENT_ITEM I, BUSINESS_PARTNER B WHERE M.MATERIAL_ID = C.MATERIAL_ID AND I.MATERIAL_ID = C.MATERIAL_ID AND I.ORDER_DEAD_LINE = C.ORDER_DEAD_LINE AND I.BUSINESS_PARTNER_ID = C.BUSINESS_PARTNER_ID AND B.BUSINESS_PARTNER_ID = C.BUSINESS_PARTNER_ID;
 CREATE VIEW V_PRODUCTION_COMMITMENT_SALES AS SELECT C.MATERIAL_ID, M.MANUFACTURER_ID, C.BUSINESS_PARTNER_ID, C.OWNER_ID, M.CAPTION, B.CAPTION AS VENDOR_CAPTION, M.PART_NUMBER, C.ORDER_DEAD_LINE, C.DELIVERY_PROMISE, C.MIN_QUANTITY, C.MAX_QUANTITY, C.UNIT, C.START_PRICE, C.CURRENCY, C.CURRENT_ORDER, C.CURRENT_PRICE, I.QUANTITY, I.PRICE, S.CUSTOMER_ID, S.SALES_ORDER_ID, O.QUANTITY AS SALES_QUANTITY, O.UNIT_PRICE, R.INITIAL_SEQUENCE, R.INITIAL_PRICE, S.STATUS FROM PRODUCT_PRICE_COMMITMENT C, MATERIAL M, PRODUCT_PRICE_COMMITMENT_ITEM I, BUSINESS_PARTNER B, SALES_ORDER_COMMITMENT R, SALES_ORDER_ITEM O, SALES_ORDER S WHERE M.MATERIAL_ID = C.MATERIAL_ID AND I.MATERIAL_ID = C.MATERIAL_ID AND I.ORDER_DEAD_LINE = C.ORDER_DEAD_LINE AND I.BUSINESS_PARTNER_ID = C.BUSINESS_PARTNER_ID AND B.BUSINESS_PARTNER_ID = C.BUSINESS_PARTNER_ID AND R.BUSINESS_PARTNER_ID = C.BUSINESS_PARTNER_ID AND R.ORDER_DEAD_LINE = C.ORDER_DEAD_LINE AND R.MATERIAL_ID = C.MATERIAL_ID AND O.SALES_ORDER_ID=R.SALES_ORDER_ID AND O.LINE=R.LINE AND S.SALES_ORDER_ID=O.SALES_ORDER_ID;
 CREATE TABLE REQUEST_FOR_PROPOSAL ( RFP_ID               INTEGER        NOT NULL, OWNER_ID             INTEGER        NOT NULL, PURCHASE_AREA        INTEGER        NOT NULL, USERNAME             VARCHAR(30)    NOT NULL, CAPTION              VARCHAR(250)   NOT NULL, REQUEST_DATE         TIMESTAMP      NOT NULL, END_OF_PROPOSAL      TIMESTAMP      NOT NULL, DELIVERY_DATE        TIMESTAMP      NOT NULL, CONSORTIUM_ALLOWED   CHAR(1)        NOT NULL, PARTIAL_ALLOWED      CHAR(1)        NOT NULL, DELIVERY_ADDRESS     SMALLINT       NOT NULL, STATUS               CHAR(1)        NOT NULL, CONSTRAINT REQUEST_FOR_PROPOSAL_PK PRIMARY KEY (RFP_ID), CONSTRAINT RFP_DELIVERY_ADDRESS    FOREIGN KEY (OWNER_ID,DELIVERY_ADDRESS) REFERENCES PARTNER_ADDRESS (BUSINESS_PARTNER_ID, ADDRESS_ID) );
 CREATE TABLE REQUEST_FOR_PROPOSAL_ITEM ( RFP_ID               INTEGER         NOT NULL, LINE                 SMALLINT        NOT NULL, MATERIAL_TYPE_ID     VARCHAR(30), MANUFACTURER_ID      VARCHAR(30), MATERIAL_ID          INTEGER, SPECIFICATION        VARCHAR(80)     NOT NULL, QUANTITY             DECIMAL(12,2)   NOT NULL, UNIT                 VARCHAR(3)      NOT NULL, CONSTRAINT REQUEST_FOR_PROPOSAL_ITEM_PK   PRIMARY KEY (RFP_ID, LINE), CONSTRAINT REQUEST_FOR_PROPOSAL_ITEMS     FOREIGN KEY (RFP_ID)            REFERENCES REQUEST_FOR_PROPOSAL (RFP_ID), CONSTRAINT RFP_ITEM_MATERIAL              FOREIGN KEY (MATERIAL_ID)       REFERENCES MATERIAL (MATERIAL_ID), CONSTRAINT REQUESTED_MANUFACTURE          FOREIGN KEY (MANUFACTURER_ID)   REFERENCES MANUFACTURER (MANUFACTURER_ID), CONSTRAINT RFP_ITEM_MATERIAL_TYPE         FOREIGN KEY (MATERIAL_TYPE_ID)  REFERENCES MATERIAL_TYPE (MATERIAL_TYPE_ID) );
 CREATE INDEX REQUEST_FOR_PROPOSAL_ITEM_IND1 ON REQUEST_FOR_PROPOSAL_ITEM (MATERIAL_ID);
 CREATE INDEX REQUEST_FOR_PROPOSAL_ITEM_IND2 ON REQUEST_FOR_PROPOSAL_ITEM (MATERIAL_TYPE_ID);
 CREATE TABLE RFP_PUBLISHMENT ( RFP_ID               INTEGER         NOT NULL, VENDOR_ID            INTEGER         NOT NULL, BEGDA                TIMESTAMP       NOT NULL, CONSTRAINT RFP_PUBLISHMENT_PK             PRIMARY KEY (RFP_ID, VENDOR_ID), CONSTRAINT RFP_PUBLISHMENTS               FOREIGN KEY (RFP_ID)            REFERENCES REQUEST_FOR_PROPOSAL (RFP_ID) );
 CREATE INDEX RFP_PUBLISHMENT_IND1 ON RFP_PUBLISHMENT (VENDOR_ID);
 CREATE TABLE PROPOSAL_TO_RFP ( PROPOSAL_ID          INTEGER        NOT NULL, OWNER_ID             INTEGER        NOT NULL, DESCRIPTION          VARCHAR(250)   NOT NULL, VALID_UNTIL          TIMESTAMP      NOT NULL, SHIPMENT_BY          CHAR(1)        NOT NULL, EXTRA_DISCOUNT       DECIMAL(12,2)  NOT NULL, TOTAL_PRICE          VARCHAR(80)    NOT NULL, CURRENCY             CHAR(3)        NOT NULL, USERNAME             VARCHAR(30)    NOT NULL, RFP_ID               INTEGER        NOT NULL, PURCHASE_ORDER_ID    INTEGER, PAYMENT_TYPE         CHAR(1)        NOT NULL, PAYMENT_NOTE         VARCHAR(250), DELIVERY_NOTE        VARCHAR(250), CONSTRAINT PROPOSAL_TO_RFP_PK             PRIMARY KEY (PROPOSAL_ID) );
 CREATE TABLE PROPOSAL_TO_RFP_ITEM ( PROPOSAL_ID          INTEGER         NOT NULL, RFP_ID               INTEGER         NOT NULL, LINE                 SMALLINT        NOT NULL, MATERIAL_TYPE_ID     VARCHAR(30)     NOT NULL, MATERIAL_ID          INTEGER         NOT NULL, OWNER_ID             INTEGER         NOT NULL, QUANTITY             DECIMAL(12,2)   NOT NULL, UNIT                 CHAR(2)         NOT NULL, UNIT_PRICE           DECIMAL(12,2)   NOT NULL, DISCOUNT_PCT         SMALLINT        NOT NULL, TAX_PCT              DECIMAL(4,2)    NOT NULL, CURRENCY             CHAR(3)         NOT NULL, CONSTRAINT PROPOSAL_TO_RFP_ITEM_PK        PRIMARY KEY (PROPOSAL_ID, RFP_ID, LINE), CONSTRAINT PROPOSAL_TO_RFP_ITEMS          FOREIGN KEY (PROPOSAL_ID)      REFERENCES PROPOSAL_TO_RFP (PROPOSAL_ID), CONSTRAINT RFP_ITEM_PROPOSALS             FOREIGN KEY (RFP_ID, LINE)     REFERENCES REQUEST_FOR_PROPOSAL_ITEM (RFP_ID, LINE), CONSTRAINT RFP_ITEM_PROPOSAL_MATERIAL     FOREIGN KEY (MATERIAL_ID)      REFERENCES MATERIAL (MATERIAL_ID), CONSTRAINT RFP_ITEM_PROPOSAL_MAT_TYPE     FOREIGN KEY (MATERIAL_TYPE_ID) REFERENCES MATERIAL_TYPE (MATERIAL_TYPE_ID));
 CREATE INDEX PROPOSAL_TO_RFP_ITEM_IND1 ON PROPOSAL_TO_RFP_ITEM (RFP_ID, LINE);
 CREATE INDEX PROPOSAL_TO_RFP_ITEM_IND2 ON PROPOSAL_TO_RFP_ITEM (MATERIAL_ID);
 CREATE INDEX PROPOSAL_TO_RFP_ITEM_IND3 ON PROPOSAL_TO_RFP_ITEM (MATERIAL_TYPE_ID);
 CREATE TABLE PROPOSAL_TO_RFP_DIALOG ( PROPOSAL_ID          INTEGER         NOT NULL, DTIME                TIMESTAMP       NOT NULL, DTEXT                VARCHAR(250)    NOT NULL, USERNAME             VARCHAR(30)     NOT NULL, CONSTRAINT PROPOSAL_TO_RFP_DIALOG_PK      PRIMARY KEY (PROPOSAL_ID, DTIME), CONSTRAINT PROPOSAL_TO_RFP_DIALOGS        FOREIGN KEY (PROPOSAL_ID)      REFERENCES PROPOSAL_TO_RFP (PROPOSAL_ID));
 CREATE VIEW V_RFP_ITEM_PROPOSAL AS SELECT R.RFP_ID, R.LINE, T.CAPTION AS RFP_MATERIAL_TYPE, F1.CAPTION AS RFP_MANUFACTURER, M1.CAPTION AS RFP_CAPTION, M1.PART_NUMBER AS RFP_PART_NUMBER, R.QUANTITY, R.UNIT, R.SPECIFICATION, M2.CAPTION AS MATERIAL_CAPTION, F2.CAPTION MANUFACTURER_CAPTION, M2.PART_NUMBER, I.PROPOSAL_ID, I.UNIT_PRICE, I.DISCOUNT_PCT, I.TAX_PCT, I.CURRENCY FROM (((REQUEST_FOR_PROPOSAL_ITEM AS R LEFT JOIN MATERIAL_TYPE AS T ON R.MATERIAL_TYPE_ID = T.MATERIAL_TYPE_ID) LEFT JOIN MATERIAL AS M1 ON R.MATERIAL_ID = M1.MATERIAL_ID) LEFT JOIN MANUFACTURER AS F1 ON M1.MANUFACTURER_ID = F1.MANUFACTURER_ID) LEFT JOIN (((PROPOSAL_TO_RFP_ITEM AS I LEFT JOIN MATERIAL AS M2 ON I.MATERIAL_ID = M2.MATERIAL_ID) LEFT JOIN PROPOSAL_TO_RFP AS P ON I.PROPOSAL_ID = P.PROPOSAL_ID) LEFT JOIN MANUFACTURER AS F2 ON M2.MANUFACTURER_ID = F2.MANUFACTURER_ID) ON (R.LINE = I.LINE AND R.RFP_ID = I.RFP_ID);
 CREATE TABLE PURCHASE_ORDER ( PURCHASE_ORDER_ID    INTEGER   NOT NULL, OWNER_ID             INTEGER   NOT NULL, VENDOR_ID            INTEGER   NOT NULL, ORGANIZATION_ID      INTEGER   NOT NULL, ORDER_DATE           TIMESTAMP   NOT NULL, DUE_DATE             TIMESTAMP, STATUS               CHAR(1)   NOT NULL, USERNAME             VARCHAR(30)   NOT NULL, DESCRIPTION          VARCHAR(250), DISCOUNT             DECIMAL(10,2), ADVANCE_PAYMENT      DECIMAL(10,2), ONLINE_ORDER         CHAR(1), CONSTRAINT PURCHASE_ORDER_PK PRIMARY KEY (PURCHASE_ORDER_ID), CONSTRAINT PURCHASE_ORDERS FOREIGN KEY (ORGANIZATION_ID) REFERENCES ORGANIZATION (ORGANIZATION_ID) );
 CREATE INDEX PURCHASE_ORDER_IND1 ON PURCHASE_ORDER (ORGANIZATION_ID);
 CREATE INDEX PURCHASE_ORDER_IND2 ON PURCHASE_ORDER (OWNER_ID);
 CREATE TABLE PURCHASE_ORDER_ITEM ( PURCHASE_ORDER_ID    INTEGER         NOT NULL, LINE                 SMALLINT        NOT NULL, MATERIAL_ID          INTEGER         NOT NULL, QUANTITY             DECIMAL(10,2)   NOT NULL, UNIT                 VARCHAR(3)      NOT NULL, UNIT_PRICE           DECIMAL(10,2), DISCOUNT             DECIMAL(10,2), CURRENCY             VARCHAR(3), STATUS               CHAR(1), CONSTRAINT PURCHASE_ORDER_ITEM_PK    PRIMARY KEY (PURCHASE_ORDER_ID, LINE), CONSTRAINT MATERIALS_PURCHASE_ORDERS FOREIGN KEY (MATERIAL_ID)       REFERENCES MATERIAL (MATERIAL_ID), CONSTRAINT PURCHASE_ORDER_ITEMS      FOREIGN KEY (PURCHASE_ORDER_ID) REFERENCES PURCHASE_ORDER (PURCHASE_ORDER_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX PURCHASE_ORDER_ITEM_IND1 ON PURCHASE_ORDER_ITEM (MATERIAL_ID);
 CREATE TABLE PURCHASE_ORDER_ITEM_ATTR ( PURCHASE_ORDER_ID    INTEGER      NOT NULL, LINE                 SMALLINT     NOT NULL, MAG_ID               VARCHAR(8)   NOT NULL, VALUE                VARCHAR(8), CONSTRAINT PURCHASE_ORDER_ITEM_ATTR_PK PRIMARY KEY (PURCHASE_ORDER_ID, LINE, MAG_ID), CONSTRAINT PURCHASE_ORDER_ITEM_ATTRS   FOREIGN KEY (PURCHASE_ORDER_ID, LINE) REFERENCES PURCHASE_ORDER_ITEM (PURCHASE_ORDER_ID, LINE) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT ATTR_GROUP_PURCHASE_ORDERS  FOREIGN KEY (MAG_ID)                  REFERENCES MATERIAL_ATTRIBUTE_GROUP (MAG_ID) );
 CREATE INDEX PURCHASE_ORDER_ITEM_ATTR_IND3 ON PURCHASE_ORDER_ITEM_ATTR (MAG_ID);
 CREATE TABLE PURCHASE_ORDER_TAX ( PURCHASE_ORDER_ID    INTEGER      NOT NULL, LINE                 SMALLINT     NOT NULL, TAX_ID               VARCHAR(8)   NOT NULL, AMOUNT               DECIMAL(10,2)   NOT NULL, CONSTRAINT PURCHASE_ORDER_TAX_PK PRIMARY KEY (PURCHASE_ORDER_ID, LINE, TAX_ID), CONSTRAINT PURCHASE_ORDER_TAXES  FOREIGN KEY (PURCHASE_ORDER_ID, LINE) REFERENCES PURCHASE_ORDER_ITEM (PURCHASE_ORDER_ID, LINE) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE PURCHASE_REASON ( PURCHASE_ORDER_ID    INTEGER    NOT NULL, LINE                 SMALLINT   NOT NULL, REASON_TYPE          CHAR(1)    NOT NULL, REASON_ID            INTEGER    NOT NULL, REASON_LINE          SMALLINT   NOT NULL, BEGDA                TIMESTAMP, CONSTRAINT PURCHASE_REASON_PK PRIMARY KEY (PURCHASE_ORDER_ID, LINE, REASON_TYPE, REASON_ID, REASON_LINE), CONSTRAINT PURCHASE_REASONS   FOREIGN KEY (PURCHASE_ORDER_ID, LINE) REFERENCES PURCHASE_ORDER_ITEM (PURCHASE_ORDER_ID, LINE) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX PURCHASE_REASON_IND1 ON PURCHASE_REASON (REASON_TYPE, REASON_ID, REASON_LINE);
 CREATE TABLE PURCHASE_DELIVERY ( DELIVERY_ID          INTEGER       NOT NULL, OWNER_ID             INTEGER       NOT NULL, ORGANIZATION_ID      INTEGER       NOT NULL, DELIVERY_DATE        TIMESTAMP     NOT NULL, INVOICE_ID           VARCHAR(20), USERNAME             VARCHAR(30)   NOT NULL, CONSTRAINT PURCHASE_DELIVERY_PK PRIMARY KEY (DELIVERY_ID), CONSTRAINT PURCHASE_DELIVERIES  FOREIGN KEY (ORGANIZATION_ID) REFERENCES ORGANIZATION (ORGANIZATION_ID) );
 CREATE INDEX PURCHASE_DELIVERY_IND1 ON PURCHASE_DELIVERY (ORGANIZATION_ID);
 CREATE INDEX PURCHASE_DELIVERY_IND2 ON PURCHASE_DELIVERY (OWNER_ID);
 CREATE TABLE PURCHASE_DELIVERY_ADDRESS ( PURCHASE_ORDER_ID    INTEGER    NOT NULL, BUSINESS_PARTNER_ID  INTEGER    NOT NULL, ADDRESS_ID           SMALLINT   NOT NULL, CONSTRAINT PURCHASE_DELIVERY_ADDRESS_PK PRIMARY KEY (PURCHASE_ORDER_ID, BUSINESS_PARTNER_ID, ADDRESS_ID), CONSTRAINT PURCHASE_DELIVERY_ADDRESSES  FOREIGN KEY (PURCHASE_ORDER_ID)               REFERENCES PURCHASE_ORDER (PURCHASE_ORDER_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT ADDRESS_PURCHASE_DELIVERIES  FOREIGN KEY (BUSINESS_PARTNER_ID, ADDRESS_ID) REFERENCES PARTNER_ADDRESS (BUSINESS_PARTNER_ID, ADDRESS_ID) );
 CREATE INDEX PURCHASE_DELIVERY_ADDRESS_IND1 ON PURCHASE_DELIVERY_ADDRESS (BUSINESS_PARTNER_ID, ADDRESS_ID);
 CREATE TABLE PURCHASE_DELIVERY_LINE ( DELIVERY_ID          INTEGER         NOT NULL, PURCHASE_ORDER_ID    INTEGER         NOT NULL, LINE                 SMALLINT        NOT NULL, MATERIAL_ID          INTEGER         NOT NULL, QUANTITY             DECIMAL(10,2)   NOT NULL, UNIT                 VARCHAR(3), CONSTRAINT PURCHASE_DELIVERY_LINE_PK      PRIMARY KEY (DELIVERY_ID, PURCHASE_ORDER_ID, LINE), CONSTRAINT PURCHASE_DELIVERY_LINES        FOREIGN KEY (DELIVERY_ID)             REFERENCES PURCHASE_DELIVERY (DELIVERY_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT PURCHASE_ORDER_ITEM_DELIVERIES FOREIGN KEY (PURCHASE_ORDER_ID, LINE) REFERENCES PURCHASE_ORDER_ITEM (PURCHASE_ORDER_ID, LINE), CONSTRAINT MATERIAL_PURCHASE_DELIVERIES   FOREIGN KEY (MATERIAL_ID)             REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE INDEX PURCHASE_DELIVERY_LINE_IND1 ON PURCHASE_DELIVERY_LINE (PURCHASE_ORDER_ID, LINE);
 CREATE INDEX PURCHASE_DELIVERY_LINE_IND2 ON PURCHASE_DELIVERY_LINE (MATERIAL_ID);
 CREATE TABLE SHIPMENT ( SHIPMENT_ID          INTEGER         NOT NULL, OWNER_ID             INTEGER         NOT NULL, SHIPMENT_TYPE        CHAR(1)         NOT NULL, SHIP_DATE            TIMESTAMP       NOT NULL, STATUS               CHAR(1)         NOT NULL, ORGANIZATION_ID      INTEGER         NOT NULL, USERNAME             VARCHAR(30)     NOT NULL, COST                 DECIMAL(10,2), INVOICE_ID           VARCHAR(20), FROM_ADDRESS         VARCHAR(80), FROM_CITY            VARCHAR(20), FROM_STATE           VARCHAR(2), FROM_COUNTRY         VARCHAR(2), TO_ADDRESS           VARCHAR(80)     NOT NULL, TO_CITY              VARCHAR(20)     NOT NULL, TO_STATE             VARCHAR(2), TO_COUNTRY           VARCHAR(2), CONSTRAINT SHIPMENT_PK PRIMARY KEY (SHIPMENT_ID), CONSTRAINT SHIPMENTS FOREIGN KEY (ORGANIZATION_ID) REFERENCES ORGANIZATION (ORGANIZATION_ID) );
 CREATE INDEX SHIPMENT_IND1 ON SHIPMENT (OWNER_ID);
 CREATE TABLE SHIPMENT_LINE ( SHIPMENT_ID          INTEGER         NOT NULL, SHIPMENT_LINE        SMALLINT        NOT NULL, MATERIAL_ID          INTEGER         NOT NULL, QUANTITY             DECIMAL(10,2)   NOT NULL, UNIT                 VARCHAR(2)      NOT NULL, REF_ORDER_TYPE CHAR(1), REF_ORDER_ID INTEGER, CONSTRAINT SHIPMENT_LINE_PK   PRIMARY KEY (SHIPMENT_ID, SHIPMENT_LINE), CONSTRAINT SHIPMENT_LINES     FOREIGN KEY (SHIPMENT_ID) REFERENCES SHIPMENT (SHIPMENT_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT MATERIAL_SHIPMENTS FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE INDEX SHIPMENT_LINES_IND3 ON SHIPMENT_LINE (MATERIAL_ID);
 CREATE TABLE MATERIAL_REQUEST ( MATERIAL_REQUEST_ID  INTEGER       NOT NULL, OWNER_ID             INTEGER       NOT NULL, ORGANIZATION_ID      INTEGER       NOT NULL, USERNAME             VARCHAR(30)   NOT NULL, PURPOSE              CHAR(1)       NOT NULL, REQUEST_DATE         TIMESTAMP     NOT NULL, DUE_DATE             TIMESTAMP     NOT NULL, STATUS               CHAR(1)       NOT NULL, DESCRIPTION          VARCHAR(250), CONSTRAINT MATERIAL_REQUEST_PK PRIMARY KEY(MATERIAL_REQUEST_ID), CONSTRAINT MATERIAL_REQUESTS FOREIGN KEY(ORGANIZATION_ID) REFERENCES ORGANIZATION(ORGANIZATION_ID) );
 CREATE INDEX MATERIAL_REQUEST_IND1 ON MATERIAL_REQUEST (ORGANIZATION_ID);
 CREATE INDEX MATERIAL_REQUEST_IND2 ON MATERIAL_REQUEST (OWNER_ID);
 CREATE TABLE MATERIAL_REQUEST_ITEM ( MATERIAL_REQUEST_ID  INTEGER         NOT NULL, LINE                 SMALLINT        NOT NULL, MATERIAL_ID          INTEGER         NOT NULL, QUANTITY             DECIMAL(10,2)   NOT NULL, UNIT                 VARCHAR(3)      NOT NULL, DESCRIPTION          VARCHAR(250), CONSTRAINT MATERIAL_REQUEST_ITEM_PK PRIMARY KEY(MATERIAL_REQUEST_ID, LINE), CONSTRAINT MATERIAL_REQUEST_ITEMS   FOREIGN KEY(MATERIAL_REQUEST_ID) REFERENCES MATERIAL_REQUEST(MATERIAL_REQUEST_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT MATERIALS_REQUESTS       FOREIGN KEY(MATERIAL_ID)         REFERENCES MATERIAL(MATERIAL_ID) );
 CREATE INDEX MATERIAL_REQUEST_ITEM_IND1 ON MATERIAL_REQUEST_ITEM (MATERIAL_ID);
 CREATE TABLE MATERIAL_REQUEST_ITEM_ATTR ( MATERIAL_REQUEST_ID  INTEGER      NOT NULL, LINE                 SMALLINT     NOT NULL, MAG_ID               VARCHAR(8)   NOT NULL, VALUE                VARCHAR(8)   NOT NULL, CONSTRAINT MATERIAL_REQUEST_ITEM_ATTR_PK PRIMARY KEY(MATERIAL_REQUEST_ID, LINE, MAG_ID), CONSTRAINT MATERIAL_REQUEST_ITEM_ATTRS   FOREIGN KEY(MATERIAL_REQUEST_ID, LINE) REFERENCES MATERIAL_REQUEST_ITEM(MATERIAL_REQUEST_ID, LINE) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT ATTR_GROUP_MATERIAL_REQUESTS  FOREIGN KEY(MAG_ID)                    REFERENCES MATERIAL_ATTRIBUTE_GROUP(MAG_ID) );
 CREATE INDEX MATERIAL_REQUEST_ITEM_ATTR_IND1 ON MATERIAL_REQUEST_ITEM_ATTR (MAG_ID);
 CREATE TABLE PRODUCT_TYPE_BY_DEFINE ( MATERIAL_TYPE_ID     VARCHAR(30)   NOT NULL, ORGANIZATION_ID      INTEGER       NOT NULL, LEAD_TIME            SMALLINT      NOT NULL, TIME_TYPE            CHAR(1)       NOT NULL, CONSTRAINT PRODUCT_TYPE_BY_DEFINE_PK PRIMARY KEY(MATERIAL_TYPE_ID, ORGANIZATION_ID), CONSTRAINT MATERIAL_TYPE_BY_DEFINE   FOREIGN KEY(MATERIAL_TYPE_ID) REFERENCES MATERIAL_TYPE (MATERIAL_TYPE_ID), CONSTRAINT PRODUCT_TYPE_BY_DEFINES   FOREIGN KEY(ORGANIZATION_ID)  REFERENCES ORGANIZATION(ORGANIZATION_ID) );
 CREATE INDEX PRODUCT_TYPE_BY_DEFINE_IND1 ON PRODUCT_TYPE_BY_DEFINE (ORGANIZATION_ID);
 CREATE TABLE PRODUCT_BY_DEFINE ( MATERIAL_TYPE_ID     VARCHAR(30)   NOT NULL, ORGANIZATION_ID      INTEGER       NOT NULL, MATERIAL_ID          INTEGER       NOT NULL, CONTENT_REQUIRED     CHAR(1)       NOT NULL, CONSTRAINT PRODUCT_BY_DEFINE_PK PRIMARY KEY(MATERIAL_TYPE_ID, ORGANIZATION_ID, MATERIAL_ID), CONSTRAINT PRODUCT_BY_DEFINES   FOREIGN KEY(MATERIAL_TYPE_ID, ORGANIZATION_ID) REFERENCES PRODUCT_TYPE_BY_DEFINE(MATERIAL_TYPE_ID, ORGANIZATION_ID), CONSTRAINT MATERIAL_BY_DEFINES  FOREIGN KEY(MATERIAL_ID)                       REFERENCES MATERIAL(MATERIAL_ID) );
 CREATE INDEX PRODUCT_BY_DEFINE_IND1 ON PRODUCT_BY_DEFINE (MATERIAL_ID);
 CREATE TABLE PRODUCTION_RESOURCE ( ORGANIZATION_ID      INTEGER      NOT NULL, RESOURCE_TYPE        VARCHAR(8)   NOT NULL, QUANTITY             INTEGER      NOT NULL, UNIT                 VARCHAR(3)   NOT NULL, CONSTRAINT PRODUCTION_RESOURCE_PK PRIMARY KEY (RESOURCE_TYPE, ORGANIZATION_ID), CONSTRAINT PRODUCTION_RESOURCES   FOREIGN KEY (ORGANIZATION_ID) REFERENCES ORGANIZATION (ORGANIZATION_ID) );
 CREATE TABLE BOM_OPERATION ( BOM_OPERATION_ID     INTEGER      NOT NULL, MATERIAL_ID          INTEGER      NOT NULL, CAPTION              VARCHAR(80)  NOT NULL, FACILITY_TYPE        VARCHAR(8)   NOT NULL, SETUP_TIME           INTEGER      NOT NULL, UNIT_TIME            INTEGER      NOT NULL, MAKEUP_TIME          INTEGER      NOT NULL, PRODUCTION_UNIT      VARCHAR(3)   NOT NULL, CONSTRAINT BOM_OPERATION_PK PRIMARY KEY (BOM_OPERATION_ID), CONSTRAINT BOM_OPERATIONS   FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE INDEX BOM_OPERATION_IND1 ON BOM_OPERATION (MATERIAL_ID);
 CREATE TABLE BOM_OPERATION_STEP ( BOM_OPERATION_ID     INTEGER   NOT NULL, STEP                 SMALLINT  NOT NULL, MATERIAL_ID          INTEGER   NOT NULL, LEAD_TIME            INTEGER, QUANTITY             DECIMAL(10,2), UNIT                 VARCHAR(3), CONSTRAINT BOM_OPERATION_STEP_PK        PRIMARY KEY (BOM_OPERATION_ID, STEP), CONSTRAINT BOM_OPERATION_STEPS          FOREIGN KEY (BOM_OPERATION_ID) REFERENCES BOM_OPERATION (BOM_OPERATION_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT BOM_OPERATION_STEP_MATERIALS FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE INDEX BOM_OPERATION_STEP_IND1 ON BOM_OPERATION_STEP (MATERIAL_ID);
 CREATE TABLE BOM_OPERATION_STEP_RESOURCE ( BOM_OPERATION_ID     INTEGER   NOT NULL, STEP                 SMALLINT   NOT NULL, RESOURCE_TYPE        VARCHAR(8)  NOT NULL, UNIT_DURATION        INTEGER, CONSTRAINT BOM_OPERATION_STEP_RESOURCE_PK PRIMARY KEY (BOM_OPERATION_ID, STEP, RESOURCE_TYPE), CONSTRAINT BOM_OPERATION_STEP_RESOURCES   FOREIGN KEY (BOM_OPERATION_ID, STEP) REFERENCES BOM_OPERATION_STEP (BOM_OPERATION_ID, STEP) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE TABLE PRODUCTION_ORDER ( PRODUCTION_ORDER_ID  INTEGER   NOT NULL, OWNER_ID             INTEGER   NOT NULL, ORGANIZATION_ID      INTEGER   NOT NULL, ORDER_DATE           TIMESTAMP, DUE_DATE             TIMESTAMP, STATUS               CHAR(1), USERNAME             VARCHAR(30), DESCRIPTION          VARCHAR(250), CONSTRAINT PRODUCTION_ORDER_PK PRIMARY KEY (PRODUCTION_ORDER_ID), CONSTRAINT PRODUCTION_ORDERS   FOREIGN KEY (ORGANIZATION_ID) REFERENCES ORGANIZATION (ORGANIZATION_ID) );
 CREATE INDEX PRODUCTION_ORDER_IND1 ON PRODUCTION_ORDER (OWNER_ID);
 CREATE INDEX PRODUCTION_ORDER_IND2 ON PRODUCTION_ORDER (ORGANIZATION_ID);
 CREATE TABLE PRODUCTION_ORDER_ITEM ( PRODUCTION_ORDER_ID  INTEGER        NOT NULL, LINE                 SMALLINT       NOT NULL, MATERIAL_ID          INTEGER        NOT NULL, QUANTITY             DECIMAL(10,2)  NOT NULL, UNIT                 VARCHAR(3)     NOT NULL, STATUS               CHAR(1)        NOT NULL, CONSTRAINT PRODUCTION_ORDER_ITEM_PK    PRIMARY KEY (PRODUCTION_ORDER_ID, LINE), CONSTRAINT PRODUCTION_ORDER_ITEMS      FOREIGN KEY (PRODUCTION_ORDER_ID) REFERENCES PRODUCTION_ORDER (PRODUCTION_ORDER_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT MATERIALS_PRODUCTION_ORDERS FOREIGN KEY (MATERIAL_ID) REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE INDEX PRODUCTION_ORDER_ITEM_IND2 ON PRODUCTION_ORDER_ITEM (MATERIAL_ID);
 CREATE TABLE PRODUCTION_JOB ( PRODUCTION_JOB_ID    INTEGER    NOT NULL, ORGANIZATION_ID      INTEGER    NOT NULL, PRODUCTION_ORDER_ID  INTEGER    NOT NULL, LINE                 SMALLINT   NOT NULL, BOM_OPERATION_ID     INTEGER    NOT NULL, CONSTRAINT PRODUCTION_JOB_PK             PRIMARY KEY (PRODUCTION_JOB_ID), CONSTRAINT PRODUCTION_ORDER_ITEM_JOBS    FOREIGN KEY (PRODUCTION_ORDER_ID, LINE) REFERENCES PRODUCTION_ORDER_ITEM (PRODUCTION_ORDER_ID, LINE), CONSTRAINT BOM_OPERATION_PRODUCTION_JOBS FOREIGN KEY (BOM_OPERATION_ID)          REFERENCES BOM_OPERATION (BOM_OPERATION_ID), CONSTRAINT ORGANIZATIONS_PRODUCTION_JOBS FOREIGN KEY (ORGANIZATION_ID)           REFERENCES ORGANIZATION (ORGANIZATION_ID) );
 CREATE INDEX PRODUCTION_JOB_IND1 ON PRODUCTION_JOB (PRODUCTION_ORDER_ID, LINE);
 CREATE INDEX PRODUCTION_JOB_IND2 ON PRODUCTION_JOB (BOM_OPERATION_ID);
 CREATE INDEX PRODUCTION_JOB_IND4 ON PRODUCTION_JOB (ORGANIZATION_ID);
 CREATE TABLE PRODUCTION_JOB_RESOURCE ( PRODUCTION_JOB_ID    INTEGER   NOT NULL, ORGANIZATION_ID      INTEGER   NOT NULL, RESOURCE_TYPE        VARCHAR(8)   NOT NULL, QUANTITY             INTEGER, BEGDA                TIMESTAMP, DURATION             INTEGER, CONSTRAINT PRODUCTION_JOB_RESOURCE_PK PRIMARY KEY (PRODUCTION_JOB_ID, RESOURCE_TYPE, ORGANIZATION_ID), CONSTRAINT PRODUCTION_JOB_RESOURCES   FOREIGN KEY (PRODUCTION_JOB_ID)              REFERENCES PRODUCTION_JOB      (PRODUCTION_JOB_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT PRODUCTION_RESOURCE_JOBS   FOREIGN KEY (ORGANIZATION_ID, RESOURCE_TYPE) REFERENCES PRODUCTION_RESOURCE (ORGANIZATION_ID, RESOURCE_TYPE) );
 CREATE INDEX PRODUCTION_JOB_RESOURCE_IND2 ON PRODUCTION_JOB_RESOURCE (ORGANIZATION_ID, RESOURCE_TYPE);
 CREATE TABLE PRODUCTION_LINE_REASON ( PRODUCTION_ORDER_ID  INTEGER    NOT NULL, LINE                 SMALLINT   NOT NULL, ORDER_TYPE           CHAR(1)    NOT NULL, ORDER_ID             INTEGER    NOT NULL, ORDER_LINE           SMALLINT   NOT NULL, PRIORITY             SMALLINT   NOT NULL, CONSTRAINT PRODUCTION_LINE_REASON_PK PRIMARY KEY (PRODUCTION_ORDER_ID, LINE, ORDER_TYPE, ORDER_ID, ORDER_LINE), CONSTRAINT PRODUCTION_LINE_REASONS   FOREIGN KEY (PRODUCTION_ORDER_ID, LINE) REFERENCES PRODUCTION_ORDER_ITEM (PRODUCTION_ORDER_ID, LINE) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX PRODUCTION_LINE_REASON_IND1 ON PRODUCTION_LINE_REASON (ORDER_TYPE, ORDER_ID, ORDER_LINE);
 CREATE TABLE EQUIPMENT ( MATERIAL_ID          INTEGER       NOT NULL, SERIAL_NO            VARCHAR(20)   NOT NULL, MODEL_YEAR           SMALLINT      NOT NULL, USAGE_TYPE           CHAR(1)       NOT NULL, CONSTRAINT EQUIPMENT_PK PRIMARY KEY (MATERIAL_ID, SERIAL_NO), CONSTRAINT EQUIPMENTS   FOREIGN KEY(MATERIAL_ID) REFERENCES MATERIAL(MATERIAL_ID) );
 CREATE TABLE EQUIPMENT_ASSIGNMENT ( PERSON_ID            INTEGER       NOT NULL, MATERIAL_ID          INTEGER       NOT NULL, SERIAL_NO            VARCHAR(20)   NOT NULL, BEGDA                TIMESTAMP     NOT NULL, ENDDA                TIMESTAMP     NOT NULL, ASSIGNMENT_TYPE      CHAR(1), CONSTRAINT EQUIPMENT_ASSIGNMENT_PK       PRIMARY KEY (PERSON_ID, MATERIAL_ID, SERIAL_NO, BEGDA), CONSTRAINT EQUIPMENTS_PERSON_ASSIGNMENTS FOREIGN KEY(MATERIAL_ID, SERIAL_NO) REFERENCES EQUIPMENT(MATERIAL_ID, SERIAL_NO) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT PERSONS_EQUIPMENT_ASSIGNMENTS FOREIGN KEY(PERSON_ID)              REFERENCES PERSON(PERSON_ID) );
 CREATE INDEX EQUIPMENT_ASSIGNMENT_IND1 ON EQUIPMENT_ASSIGNMENT (MATERIAL_ID, SERIAL_NO);
 CREATE TABLE EQUIPMENT_ATTRIBUTE ( MATERIAL_ID          INTEGER      NOT NULL, SERIAL_NO            VARCHAR(20)  NOT NULL, MAG_ID               VARCHAR(8)   NOT NULL, VALUE                VARCHAR(8)   NOT NULL, CONSTRAINT EQUIPMENT_ATTRIBUTE_PK        PRIMARY KEY (MATERIAL_ID, SERIAL_NO, MAG_ID), CONSTRAINT EQUIPMENT_ATTRIBUTES          FOREIGN KEY (MATERIAL_ID, SERIAL_NO) REFERENCES EQUIPMENT(MATERIAL_ID, SERIAL_NO) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT MATERIAL_ATTRIBUTE_EQUIPMENTS FOREIGN KEY (MAG_ID) REFERENCES MATERIAL_ATTRIBUTE_GROUP(MAG_ID) );
 CREATE INDEX EQUIPMENT_ATTRIBUTE_IND1 ON EQUIPMENT_ATTRIBUTE (MAG_ID);
 CREATE TABLE EQUIPMENT_LOCATION ( MATERIAL_ID          INTEGER     NOT NULL, SERIAL_NO            VARCHAR(20) NOT NULL, ORGANIZATION_ID      INTEGER     NOT NULL, BEGDA                TIMESTAMP   NOT NULL, ENDDA                TIMESTAMP   NOT NULL, CONSTRAINT EQUIPMENT_LOCATION_PK   PRIMARY KEY (MATERIAL_ID, SERIAL_NO, ORGANIZATION_ID), CONSTRAINT ORGANIZATIONS_EQUIPMENT FOREIGN KEY (ORGANIZATION_ID)        REFERENCES ORGANIZATION (ORGANIZATION_ID), CONSTRAINT EQUIPMENT_LOCATIONS     FOREIGN KEY (MATERIAL_ID, SERIAL_NO) REFERENCES EQUIPMENT (MATERIAL_ID, SERIAL_NO) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX EQUIPMENT_LOCATION_IND1 ON EQUIPMENT_LOCATION (ORGANIZATION_ID);
 CREATE TABLE FINAL_EQUIPMENT_PART ( MATERIAL_ID          INTEGER       NOT NULL, MATERIAL_TYPE_ID     VARCHAR(30)   NOT NULL, QUANTITY             INTEGER       NOT NULL, UNIT                 VARCHAR(3)    NOT NULL, CONSTRAINT FINAL_EQUIPMENT_PART_PK     PRIMARY KEY (MATERIAL_ID, MATERIAL_TYPE_ID), CONSTRAINT MATERIAL_TYPE_IN_EQUIPMENTS FOREIGN KEY(MATERIAL_TYPE_ID) REFERENCES MATERIAL_TYPE (MATERIAL_TYPE_ID), CONSTRAINT EQUIPMENT_COMPONENTS        FOREIGN KEY(MATERIAL_ID)      REFERENCES MATERIAL (MATERIAL_ID) );
 CREATE INDEX FINAL_EQUIPMENT_PART_IND1 ON FINAL_EQUIPMENT_PART (MATERIAL_ID);
 CREATE TABLE SERVICE_TYPE ( SERVICE_TYPE_ID      INTEGER       NOT NULL, OWNER_ID             INTEGER       NOT NULL, BUSINESS_SERVICE_ID  VARCHAR(20)   NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, CONSTRAINT SERVICE_TYPE_PK PRIMARY KEY (SERVICE_TYPE_ID), CONSTRAINT SERVICE_TYPES   FOREIGN KEY(BUSINESS_SERVICE_ID) REFERENCES BUSINESS_SERVICE (BUSINESS_SERVICE_ID) );
 CREATE INDEX SERVICE_TYPE_IND1 ON SERVICE_TYPE (BUSINESS_SERVICE_ID);
 CREATE INDEX SERVICE_TYPE_IND2 ON SERVICE_TYPE (OWNER_ID);
 CREATE TABLE SERVICE_TYPE_STEP ( SERVICE_TYPE_ID      INTEGER       NOT NULL, MATERIAL_TYPE_ID     VARCHAR(30)   NOT NULL, QUANTITY             INTEGER       NOT NULL, UNIT                 VARCHAR(3)    NOT NULL, DURATION             INTEGER       NOT NULL, CONSTRAINT SERVICE_TYPE_STEP_PK        PRIMARY KEY (SERVICE_TYPE_ID, MATERIAL_TYPE_ID), CONSTRAINT SERVICE_TYPE_STEPS          FOREIGN KEY(SERVICE_TYPE_ID)  REFERENCES SERVICE_TYPE(SERVICE_TYPE_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT MATERIAL_TYPE_SERVICE_TYPES FOREIGN KEY(MATERIAL_TYPE_ID) REFERENCES MATERIAL_TYPE(MATERIAL_TYPE_ID) );
 CREATE INDEX SERVICE_TYPE_STEP_IND1 ON SERVICE_TYPE_STEP (MATERIAL_TYPE_ID);
 CREATE TABLE SERVICE_CHARGE ( SERVICE_TYPE_ID      INTEGER         NOT NULL, BEGDA                TIMESTAMP       NOT NULL, ENDDA                TIMESTAMP       NOT NULL, CHARGE               DECIMAL(12,2)   NOT NULL, CONSTRAINT SERVICE_CHARGE_PK PRIMARY KEY (SERVICE_TYPE_ID, BEGDA), CONSTRAINT SERVICE_CHARGES   FOREIGN KEY(SERVICE_TYPE_ID) REFERENCES SERVICE_TYPE(SERVICE_TYPE_ID) );
 CREATE TABLE MX_COUNTER_TYPE ( COUNTER_TYPE         VARCHAR(8)   NOT NULL, CAPTION              VARCHAR(30)   NOT NULL, CONSTRAINT MX_COUNTER_TYPE_PK PRIMARY KEY (COUNTER_TYPE) );
 CREATE TABLE MX_COUNTER_INTERVAL ( SERVICE_TYPE_ID      INTEGER       NOT NULL, MATERIAL_TYPE_ID     VARCHAR(30)   NOT NULL, COUNTER_TYPE         VARCHAR(8)    NOT NULL, INTERVAL             INTEGER       NOT NULL, CONSTRAINT MX_COUNTER_INTERVAL_PK         PRIMARY KEY (SERVICE_TYPE_ID, MATERIAL_TYPE_ID, COUNTER_TYPE), CONSTRAINT SERVICE_TYPE_COUNTER_INTERVALS FOREIGN KEY (SERVICE_TYPE_ID, MATERIAL_TYPE_ID) REFERENCES SERVICE_TYPE_STEP(SERVICE_TYPE_ID, MATERIAL_TYPE_ID), CONSTRAINT MX_COUNTER_TYPE_INTERVALS      FOREIGN KEY(COUNTER_TYPE)                       REFERENCES MX_COUNTER_TYPE(COUNTER_TYPE) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX MX_COUNTER_INTERVAL_IND1 ON MX_COUNTER_INTERVAL (COUNTER_TYPE);
 CREATE TABLE MAINTENANCE ( MATERIAL_ID          INTEGER         NOT NULL, SERIAL_NO            VARCHAR(20)     NOT NULL, SERVICE_DATE         TIMESTAMP       NOT NULL, ORGANIZATION_ID      INTEGER         NOT NULL, LABOR                DECIMAL(12,2)   NOT NULL, CHARGE               DECIMAL(12,2)   NOT NULL, CONSTRAINT MAINTENANCE_PK            PRIMARY KEY (MATERIAL_ID, SERIAL_NO, SERVICE_DATE), CONSTRAINT EQUIPMENT_MAINTENANCES    FOREIGN KEY (MATERIAL_ID, SERIAL_NO) REFERENCES EQUIPMENT (MATERIAL_ID, SERIAL_NO), CONSTRAINT ORGANIZATION_MAINTENANCES FOREIGN KEY (ORGANIZATION_ID)        REFERENCES ORGANIZATION (ORGANIZATION_ID) );
 CREATE INDEX MAINTENANCE_IND1 ON MAINTENANCE (ORGANIZATION_ID);
 CREATE TABLE MAINTENANCE_STEP ( MATERIAL_ID          INTEGER       NOT NULL, SERIAL_NO            VARCHAR(20)   NOT NULL, SERVICE_DATE         TIMESTAMP     NOT NULL, MATERIAL_TYPE_ID     VARCHAR(30)   NOT NULL, QUANTITY             INTEGER       NOT NULL, UNIT                 VARCHAR(3)    NOT NULL, ACTION_TIME          TIMESTAMP     NOT NULL, COST                 DECIMAL(12,2) NOT NULL, CONSTRAINT MAINTENANCE_STEP_PK    PRIMARY KEY (MATERIAL_ID, SERIAL_NO, SERVICE_DATE, MATERIAL_TYPE_ID), CONSTRAINT MAINTENANCE_STEPS      FOREIGN KEY(SERVICE_DATE, SERIAL_NO, MATERIAL_ID) REFERENCES MAINTENANCE   (SERVICE_DATE, SERIAL_NO, MATERIAL_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT MATERIAL_TYPE_MX_STEPS FOREIGN KEY(MATERIAL_TYPE_ID)                     REFERENCES MATERIAL_TYPE (MATERIAL_TYPE_ID) );
 CREATE INDEX MAINTENANCE_STEP_IND1 ON MAINTENANCE_STEP (MATERIAL_TYPE_ID);
 CREATE TABLE MAINTENANCE_COUNTER ( MATERIAL_ID          INTEGER       NOT NULL, SERIAL_NO            VARCHAR(20)   NOT NULL, SERVICE_DATE         TIMESTAMP     NOT NULL, COUNTER_TYPE         VARCHAR(8)    NOT NULL, VALUE                INTEGER       NOT NULL, CONSTRAINT MAINTENANCE_COUNTER_PK    PRIMARY KEY (MATERIAL_ID, SERIAL_NO, SERVICE_DATE, COUNTER_TYPE), CONSTRAINT MAINTENANCE_COUNTERS      FOREIGN KEY (MATERIAL_ID, SERIAL_NO, SERVICE_DATE) REFERENCES MAINTENANCE (MATERIAL_ID, SERIAL_NO, SERVICE_DATE) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT COUNTER_TYPE_MAINTENANCES FOREIGN KEY (COUNTER_TYPE)                         REFERENCES MX_COUNTER_TYPE (COUNTER_TYPE) );
 CREATE INDEX MAINTENANCE_COUNTER_IND1 ON MAINTENANCE_COUNTER (COUNTER_TYPE);
 CREATE TABLE PROJECT ( PROJECT_ID          INTEGER      NOT NULL, OWNER_ID            INTEGER      NOT NULL, CAPTION             VARCHAR(100) NOT NULL, STATUS              VARCHAR(20)  DEFAULT 'INITIAL' NOT NULL, COUNTRY             CHAR(2)      NOT NULL, LOCATION            VARCHAR(50), CUSTOMER            VARCHAR(100), CONTRACT_DATE       TIMESTAMP, AREA_HANDOVER       DATE, DURATION            INTEGER, REVIZED_DURATION    INTEGER, DURATION_TYPE       CHAR(1), REVIZED_COMPLETION  TIMESTAMP, EXPECTED_COMPLETION TIMESTAMP, END_OF_WARRANTY     TIMESTAMP, CONTRACTED_AMOUNT   INTEGER, CONTRACT_EXCHANGE   VARCHAR(3), EXPECTED_COST       INTEGER, ADVANCE_PERCENT     SMALLINT, LETTER_OF_ADVANCE   SMALLINT, LETTER_OF_WARRANTY  SMALLINT, ORGANIZATION_ID     INTEGER, CONSTRAINT PROJECT_PK  PRIMARY KEY (PROJECT_ID), CONSTRAINT PROJECT_CK1 CHECK (CONTRACT_DATE <= AREA_HANDOVER) );
 CREATE TABLE CATEGORY ( CATEGORY_ID       INTEGER       NOT NULL, PARENT_ID         INTEGER, CAPTION           VARCHAR(100)  NOT NULL, CAT_INDEX         VARCHAR(2)    NOT NULL, DETAILS           VARCHAR(1000), UNIT              VARCHAR(20), CAT_LEVEL         SMALLINT      NOT NULL, TREE_CODE         VARCHAR(20)   NOT NULL, ACCOUNT_SCHEMA_ID INTEGER, PROJECT_ID        INTEGER, MAIN_FLAG         CHAR(1)       NOT NULL, UNIT2             VARCHAR(3), CONSTRAINT CATEGORY_PK PRIMARY KEY (CATEGORY_ID), CONSTRAINT CATEGORIES  FOREIGN KEY (PARENT_ID) REFERENCES CATEGORY (CATEGORY_ID) );
 CREATE TABLE CATEGORY_TEXT ( CATEGORY_ID       INTEGER       NOT NULL, LANGCODE          CHAR(2)       NOT NULL, CAPTION           VARCHAR(100)  NOT NULL, CONSTRAINT CATEGORY_TEXT_PK PRIMARY KEY (CATEGORY_ID, LANGCODE), CONSTRAINT CATEGORY_TEXTS   FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY (CATEGORY_ID) ON DELETE CASCADE );
 CREATE TABLE WORKER ( WORKER_ID            INTEGER      NOT NULL, CAPTION              VARCHAR(100) NOT NULL, BUSINESS_PARTNER_ID  INTEGER, PERSON_ID            INTEGER, CITIZENSHIP          CHAR(2), CONSTRAINT WORKER_PK             PRIMARY KEY (WORKER_ID), CONSTRAINT SUBCONTRACTOR_WORKERS FOREIGN KEY (BUSINESS_PARTNER_ID) REFERENCES SUBCONTRACTOR (BUSINESS_PARTNER_ID) );
 CREATE TABLE PROJECT_TEAM ( PROJECT_ID    INTEGER       NOT NULL, TEAM_ID       SMALLINT      NOT NULL, CAPTION       VARCHAR(100)  NOT NULL, CONSTRAINT PROJECT_TEAM_PK PRIMARY KEY (PROJECT_ID, TEAM_ID), CONSTRAINT PROJECT_TEAMS   FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (PROJECT_ID) );
 CREATE TABLE PROJECT_TEAM_PERSON ( PROJECT_ID    INTEGER   NOT NULL, TEAM_ID       SMALLINT  NOT NULL, WORKER_ID     INTEGER   NOT NULL, TEAM_LEAD     CHAR(1)   DEFAULT '0' NOT NULL, CONSTRAINT PROJECT_TEAM_PERSON_PK PRIMARY KEY (PROJECT_ID, TEAM_ID, WORKER_ID), CONSTRAINT PROJECT_TEAM_PERSONNEL FOREIGN KEY (PROJECT_ID, TEAM_ID) REFERENCES PROJECT_TEAM (PROJECT_ID, TEAM_ID) ON DELETE CASCADE, CONSTRAINT WORKERS_PROJECT_TEAMS  FOREIGN KEY (WORKER_ID) REFERENCES WORKER (WORKER_ID) );
 CREATE TABLE PROJECT_WBS ( PROJECT_ID           INTEGER      NOT NULL, CATEGORY_ID          INTEGER      NOT NULL, ACCOUNT_SCHEMA_ID    INTEGER, UNIT                 VARCHAR(3)   NOT NULL, METRIC               DECIMAL(8,2) NOT NULL, QUANTITY             DECIMAL(8,2) NOT NULL, PUP_METRIC           DECIMAL(8,2), PUP_QUANTITY         DECIMAL(8,2), PLANNED_METRIC       DECIMAL(8,2), PLANNED_QUANTITY     DECIMAL(8,2), CUSTOMER_WBS_CODE    VARCHAR(20), CUSTOMER_WBS_CAPTION VARCHAR(100), CONSTRAINT PROJECT_WBS_PK    PRIMARY KEY (PROJECT_ID, CATEGORY_ID), CONSTRAINT PROJECT_WBSES     FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (PROJECT_ID), CONSTRAINT CATEGORY_IN_WBSES FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORY (CATEGORY_ID) );
 CREATE TABLE PROJECT_TEAM_TEMPLATE ( PROJECT_ID    INTEGER  NOT NULL, TEAM_ID       SMALLINT  NOT NULL, CATEGORY_ID   INTEGER  NOT NULL, CONSTRAINT PROJECT_TEAM_TEMPLATE_PK   PRIMARY KEY (PROJECT_ID, TEAM_ID, CATEGORY_ID), CONSTRAINT PROJECT_TEAM_TEMPLATES     FOREIGN KEY (PROJECT_ID, TEAM_ID) REFERENCES PROJECT_TEAM (PROJECT_ID, TEAM_ID) ON DELETE CASCADE, CONSTRAINT PROJECT_WBS_TEAM_TEMPLATES FOREIGN KEY (PROJECT_ID, CATEGORY_ID) REFERENCES PROJECT_WBS (PROJECT_ID, CATEGORY_ID) ON DELETE CASCADE );
 CREATE TABLE PROJECT_WBS_MANHOUR ( PROJECT_ID       INTEGER      NOT NULL, CATEGORY_ID      INTEGER      NOT NULL, TEAM_ID          SMALLINT      NOT NULL, WORKER_ID        INTEGER      NOT NULL, ACTIVITY_DATE    TIMESTAMP    NOT NULL, MANHOUR          SMALLINT     NOT NULL, OVERTIME         SMALLINT, LOCAL_MH         SMALLINT, FOREIGN_MH       SMALLINT, TR_MH            SMALLINT, STATUS           VARCHAR(20) DEFAULT 'INITIAL' NOT NULL, CONSTRAINT PROJECT_WBS_MANHOUR_PK         PRIMARY KEY (PROJECT_ID, CATEGORY_ID, TEAM_ID, WORKER_ID, ACTIVITY_DATE), CONSTRAINT PROJECT_WBS_MANHOURS           FOREIGN KEY (PROJECT_ID, CATEGORY_ID)        REFERENCES PROJECT_WBS (PROJECT_ID, CATEGORY_ID), CONSTRAINT PROJECT_TEAM_PERSONNEL_MANHOUR FOREIGN KEY (PROJECT_ID, TEAM_ID, WORKER_ID) REFERENCES PROJECT_TEAM_PERSON (PROJECT_ID, TEAM_ID, WORKER_ID) );
 CREATE TABLE PROJECT_WBS_QUANTITY ( PROJECT_ID        INTEGER      NOT NULL, CATEGORY_ID       INTEGER      NOT NULL, TEAM_ID           SMALLINT     NOT NULL, BEGDA             TIMESTAMP    NOT NULL, ENDDA             TIMESTAMP    NOT NULL, QUANTITY          DECIMAL(8,2) NOT NULL, STATUS            VARCHAR(20)  DEFAULT 'INITIAL' NOT NULL, CONSTRAINT PROJECT_WBS_QUANTITY_PK     PRIMARY KEY (PROJECT_ID, CATEGORY_ID, BEGDA), CONSTRAINT PROJECT_WBS_QUANTITIES      FOREIGN KEY (PROJECT_ID, CATEGORY_ID)  REFERENCES PROJECT_WBS (PROJECT_ID, CATEGORY_ID), CONSTRAINT PROJECT_TEAM_WBS_QUANTITIES FOREIGN KEY (PROJECT_ID, TEAM_ID)    REFERENCES PROJECT_TEAM (PROJECT_ID, TEAM_ID), CONSTRAINT PROJECT_WBS_QUANTITY_CK1    CHECK ( ENDDA > BEGDA ) );
 CREATE TABLE PROJECT_APPROVAL_HISTORY ( PROJECT_ID       INTEGER     NOT NULL, USERNAME         VARCHAR(30) NOT NULL, APPROVAL         TIMESTAMP   NOT NULL, STATUS           VARCHAR(20) NOT NULL, CONSTRAINT PROJECT_APPROVAL_HISTORY_PK   PRIMARY KEY (PROJECT_ID, USERNAME, APPROVAL), CONSTRAINT PROJECT_APPROVAL_HISTORIES    FOREIGN KEY (PROJECT_ID) REFERENCES PROJECT (PROJECT_ID), CONSTRAINT PROJECT_APPROVAL_USER_HISTORY FOREIGN KEY (USERNAME)   REFERENCES USER_ACCOUNT (USERNAME) );
 CREATE VIEW PROJECT_WBS_QUANTITY_AGGR AS SELECT PROJECT_ID, CATEGORY_ID, MAX(BEGDA) AS MAX_BEGDA, MAX(ENDDA) AS MAX_ENDDA, SUM(QUANTITY) AS SUM_QUANTITY FROM PROJECT_WBS_QUANTITY GROUP BY PROJECT_ID, CATEGORY_ID;
 CREATE VIEW PROJECT_WBS_MANHOUR_AGGR AS SELECT PROJECT_ID, CATEGORY_ID, SUM(MANHOUR) AS SUM_MANHOUR FROM PROJECT_WBS_MANHOUR GROUP BY PROJECT_ID, CATEGORY_ID;
 CREATE VIEW PROJECT_WBS_STATUS AS SELECT P.PROJECT_ID, C.CATEGORY_ID, P.CAPTION AS PRJ_CAPTION, C.PARENT_ID, C.TREE_CODE, C.CAPTION AS CAT_CAPTION, W.UNIT, W.METRIC, W.QUANTITY, W.PUP_METRIC, W.PUP_QUANTITY, Q.SUM_QUANTITY, M.SUM_MANHOUR FROM ( ( PROJECT AS P INNER JOIN (CATEGORY AS C INNER JOIN PROJECT_WBS AS W ON C.CATEGORY_ID = W.CATEGORY_ID) ON P.PROJECT_ID = W.PROJECT_ID) LEFT JOIN PROJECT_WBS_MANHOUR_AGGR AS M ON W.CATEGORY_ID = M.CATEGORY_ID AND W.PROJECT_ID = M.PROJECT_ID ) LEFT JOIN PROJECT_WBS_QUANTITY_AGGR AS Q ON W.CATEGORY_ID = Q.CATEGORY_ID AND W.PROJECT_ID = Q.PROJECT_ID;
 CREATE VIEW PROJECT_PROGRESS AS SELECT W.PROJECT_ID, W.CATEGORY_ID, W.UNIT, W.METRIC, W.QUANTITY, W.METRIC * W.QUANTITY AS WORKFORCE, W.PUP_METRIC, W.PUP_QUANTITY, W.PUP_METRIC * W.PUP_QUANTITY AS PUP_WORKFORCE, W.PLANNED_METRIC, W.PLANNED_QUANTITY, W.PLANNED_METRIC * W.PLANNED_QUANTITY AS PLANNED_WORKFORCE, A.SUM_QUANTITY, B.SUM_MANHOUR FROM (PROJECT_WBS AS W LEFT JOIN PROJECT_WBS_QUANTITY_AGGR AS A ON A.PROJECT_ID  = W.PROJECT_ID AND A.CATEGORY_ID = W.CATEGORY_ID) LEFT JOIN PROJECT_WBS_MANHOUR_AGGR AS B ON B.PROJECT_ID  = W.PROJECT_ID AND B.CATEGORY_ID = W.CATEGORY_ID;
 CREATE VIEW PROJECT_WBS_TEAM_QTY_AGGR AS SELECT PROJECT_ID, CATEGORY_ID, TEAM_ID, MAX(BEGDA) AS MAX_BEGDA, MAX(ENDDA) AS MAX_ENDDA, SUM(QUANTITY) AS SUM_QUANTITY FROM PROJECT_WBS_QUANTITY GROUP BY PROJECT_ID, CATEGORY_ID, TEAM_ID;
 CREATE VIEW PROJECT_WBS_TEAM_MH_AGGR AS SELECT PROJECT_ID, CATEGORY_ID, TEAM_ID, SUM(MANHOUR) AS SUM_MANHOUR FROM PROJECT_WBS_MANHOUR GROUP BY PROJECT_ID, CATEGORY_ID, TEAM_ID;
 CREATE VIEW PROJECT_WBS_TEAM_STATUS AS SELECT P.PROJECT_ID, C.CATEGORY_ID, T.TEAM_ID, P.CAPTION AS PRJ_CAPTION, C.PARENT_ID, C.TREE_CODE, C.CAPTION AS CAT_CAPTION, T.CAPTION AS TEAM_CAPTION, W.UNIT, W.METRIC, W.QUANTITY, A.SUM_QUANTITY, B.SUM_MANHOUR, Q.BEGDA, Q.ENDDA, Q.QUANTITY AS LAST_QUANTITY FROM ( (CATEGORY AS C INNER JOIN (PROJECT AS P INNER JOIN (PROJECT_WBS AS W INNER JOIN (PROJECT_TEAM AS T INNER JOIN PROJECT_WBS_TEAM_MH_AGGR AS B ON T.TEAM_ID = B.TEAM_ID) ON W.PROJECT_ID  = B.PROJECT_ID AND W.CATEGORY_ID = B.CATEGORY_ID) ON P.PROJECT_ID = W.PROJECT_ID AND P.PROJECT_ID = T.PROJECT_ID) ON C.CATEGORY_ID = W.CATEGORY_ID) LEFT JOIN PROJECT_WBS_TEAM_QTY_AGGR AS A ON B.TEAM_ID     = A.TEAM_ID AND B.CATEGORY_ID = A.CATEGORY_ID AND B.PROJECT_ID  = A.PROJECT_ID) LEFT JOIN PROJECT_WBS_QUANTITY AS Q ON Q.BEGDA       = A.MAX_BEGDA AND Q.TEAM_ID     = A.TEAM_ID AND Q.CATEGORY_ID = A.CATEGORY_ID AND Q.PROJECT_ID  = A.PROJECT_ID;
 CREATE VIEW PROJECT_WBS_TEAM_SUMMARY AS SELECT P.PROJECT_ID, C.CATEGORY_ID, T.TEAM_ID, P.CAPTION AS PRJ_CAPTION, C.PARENT_ID, C.TREE_CODE, C.CAPTION AS CAT_CAPTION, T.CAPTION AS TEAM_CAPTION, W.UNIT, W.METRIC, W.QUANTITY, A.SUM_QUANTITY, B.SUM_MANHOUR FROM ( ( (CATEGORY AS C INNER JOIN (PROJECT AS P INNER JOIN PROJECT_WBS AS W ON P.PROJECT_ID = W.PROJECT_ID) ON C.CATEGORY_ID = W.CATEGORY_ID) INNER JOIN PROJECT_TEAM AS T ON P.PROJECT_ID = T.PROJECT_ID) INNER JOIN PROJECT_WBS_TEAM_MH_AGGR AS B ON T.TEAM_ID     = B.TEAM_ID AND W.CATEGORY_ID = B.CATEGORY_ID AND W.PROJECT_ID  = B.PROJECT_ID) LEFT JOIN PROJECT_WBS_TEAM_QTY_AGGR AS A ON B.TEAM_ID     = A.TEAM_ID AND B.CATEGORY_ID = A.CATEGORY_ID AND B.PROJECT_ID  = A.PROJECT_ID;
 CREATE VIEW PROJECT_WBS_QTY_APPROVED AS SELECT PROJECT_ID, CATEGORY_ID, TEAM_ID, SUM(QUANTITY) AS APPROVED_QUANTITY FROM PROJECT_WBS_QUANTITY WHERE STATUS = 'APPROVE_QUANTITY' GROUP BY PROJECT_ID, CATEGORY_ID, TEAM_ID;
 CREATE VIEW PROJECT_WBS_QTY_INITIAL AS SELECT PROJECT_ID, CATEGORY_ID, TEAM_ID, SUM(QUANTITY) AS QUANTITY_TO_APPROVE FROM PROJECT_WBS_QUANTITY WHERE STATUS = 'INITIAL' GROUP BY PROJECT_ID, CATEGORY_ID, TEAM_ID;
 CREATE VIEW PROJECT_WBS_QTY_TO_APR AS SELECT P.PROJECT_ID, C.CATEGORY_ID, T.TEAM_ID, P.CAPTION AS PROJECT_CAPTION, C.TREE_CODE, C.CAPTION AS CATEGORY_CAPTION, T.CAPTION AS TEAM_CAPTION, W.UNIT, W.METRIC, W.QUANTITY, A.APPROVED_QUANTITY, B.BEGDA, B.ENDDA, B.QUANTITY AS QUANTITY_TO_APPROVE FROM ( ( (CATEGORY AS C INNER JOIN (PROJECT AS P INNER JOIN PROJECT_WBS AS W ON P.PROJECT_ID = W.PROJECT_ID) ON C.CATEGORY_ID = W.CATEGORY_ID) INNER JOIN PROJECT_TEAM AS T ON P.PROJECT_ID = T.PROJECT_ID) INNER JOIN PROJECT_WBS_QUANTITY AS B ON B.TEAM_ID     = T.TEAM_ID AND B.CATEGORY_ID = W.CATEGORY_ID AND B.PROJECT_ID  = W.PROJECT_ID AND B.STATUS      = 'INITIAL') LEFT JOIN PROJECT_WBS_QTY_APPROVED AS A ON B.TEAM_ID     = A.TEAM_ID AND B.CATEGORY_ID = A.CATEGORY_ID AND B.PROJECT_ID  = A.PROJECT_ID;
 CREATE VIEW PROJECT_WBS_MH_APPROVED AS SELECT PROJECT_ID, CATEGORY_ID, TEAM_ID, SUM(MANHOUR) AS APPROVED_MANHOUR FROM PROJECT_WBS_MANHOUR WHERE STATUS = 'APPROVE_MANHOUR' GROUP BY PROJECT_ID, CATEGORY_ID, TEAM_ID;
 CREATE VIEW PROJECT_WBS_MH_INITIAL AS SELECT PROJECT_ID, CATEGORY_ID, TEAM_ID, ACTIVITY_DATE, SUM(MANHOUR) AS MANHOUR_TO_APPROVE FROM PROJECT_WBS_MANHOUR WHERE STATUS = 'INITIAL' GROUP BY PROJECT_ID, CATEGORY_ID, TEAM_ID, ACTIVITY_DATE;
 CREATE VIEW PROJECT_WBS_MH_TO_APR AS SELECT P.PROJECT_ID, C.CATEGORY_ID, T.TEAM_ID, P.CAPTION AS PROJECT_CAPTION, C.TREE_CODE, C.CAPTION AS CATEGORY_CAPTION, T.CAPTION AS TEAM_CAPTION, W.UNIT, W.METRIC, W.QUANTITY, A.APPROVED_MANHOUR, B.ACTIVITY_DATE, B.MANHOUR_TO_APPROVE FROM ( ( (CATEGORY AS C INNER JOIN (PROJECT AS P INNER JOIN PROJECT_WBS AS W ON P.PROJECT_ID = W.PROJECT_ID) ON C.CATEGORY_ID = W.CATEGORY_ID) INNER JOIN PROJECT_TEAM AS T ON P.PROJECT_ID = T.PROJECT_ID) INNER JOIN PROJECT_WBS_MH_INITIAL AS B ON T.TEAM_ID     = B.TEAM_ID AND W.CATEGORY_ID = B.CATEGORY_ID AND W.PROJECT_ID  = B.PROJECT_ID) LEFT JOIN PROJECT_WBS_MH_APPROVED AS A ON B.TEAM_ID     = A.TEAM_ID AND B.CATEGORY_ID = A.CATEGORY_ID AND B.PROJECT_ID  = A.PROJECT_ID;
 CREATE VIEW PROJECT_SUBCONTRACTOR_SUMMARY AS SELECT T.PROJECT_ID, O.BUSINESS_PARTNER_ID, C.CATEGORY_ID, C.TREE_CODE, C.CAPTION, W.CUSTOMER_WBS_CODE, W.CUSTOMER_WBS_CAPTION, W.ACCOUNT_SCHEMA_ID, W.UNIT, W.METRIC, W.QUANTITY, W.PUP_METRIC, W.PUP_QUANTITY, W.PLANNED_METRIC, W.PLANNED_QUANTITY, SUM(Q.APPROVED_QUANTITY) AS SUM_QUANTITY, SUM(M.APPROVED_MANHOUR) AS SUM_MANHOUR FROM CATEGORY C, PROJECT_WBS W, PROJECT_TEAM T, PROJECT_WBS_MH_APPROVED M, PROJECT_WBS_QTY_APPROVED Q, PROJECT_TEAM_PERSON P, WORKER O WHERE W.PROJECT_ID      = T.PROJECT_ID AND W.CATEGORY_ID     = C.CATEGORY_ID AND Q.PROJECT_ID      = W.PROJECT_ID AND Q.CATEGORY_ID     = W.CATEGORY_ID AND Q.TEAM_ID         = T.TEAM_ID AND M.PROJECT_ID      = W.PROJECT_ID AND M.CATEGORY_ID     = W.CATEGORY_ID AND M.TEAM_ID         = T.TEAM_ID AND P.PROJECT_ID      = T.PROJECT_ID AND P.TEAM_ID         = T.TEAM_ID AND P.TEAM_LEAD       = '1' AND O.WORKER_ID       = P.WORKER_ID GROUP BY T.PROJECT_ID, O.BUSINESS_PARTNER_ID, C.CATEGORY_ID, C.TREE_CODE, C.CAPTION, W.CUSTOMER_WBS_CODE, W.CUSTOMER_WBS_CAPTION, W.ACCOUNT_SCHEMA_ID, W.UNIT, W.METRIC, W.QUANTITY, W.PUP_METRIC, W.PUP_QUANTITY, W.PLANNED_METRIC, W.PLANNED_QUANTITY;
 CREATE TABLE SERVICE_LEVEL_AGREEMENT ( OWNER_ID             INTEGER       NOT NULL, BUSINESS_SERVICE_ID  VARCHAR(20)   NOT NULL, BUSINESS_PARTNER_ID  INTEGER       NOT NULL, BEGDA                TIMESTAMP     NOT NULL, ENDDA                TIMESTAMP, INITIAL_RESPONSE     INTEGER, EXPERT_RESPONSE      INTEGER, SERVICE_DAYS         CHAR(1), SERVICE_HOURS        CHAR(1), CONSTRAINT SERVICE_LEVEL_AGREEMENT_PK PRIMARY KEY (OWNER_ID, BUSINESS_SERVICE_ID, BUSINESS_PARTNER_ID, BEGDA), CONSTRAINT PARTNER_SERVICE_AGREEMENTS FOREIGN KEY (BUSINESS_SERVICE_ID) REFERENCES BUSINESS_SERVICE (BUSINESS_SERVICE_ID), CONSTRAINT SERVICE_LEVEL_AGREEMENTS   FOREIGN KEY (BUSINESS_PARTNER_ID) REFERENCES BUSINESS_PARTNER (BUSINESS_PARTNER_ID) ON DELETE CASCADE ON UPDATE CASCADE );
 CREATE INDEX SERVICE_LEVEL_AGREEMENT_IND1 ON SERVICE_LEVEL_AGREEMENT (BUSINESS_SERVICE_ID);
 CREATE INDEX SERVICE_LEVEL_AGREEMENT_IND2 ON SERVICE_LEVEL_AGREEMENT (BUSINESS_PARTNER_ID);
 CREATE TABLE SUPPORT_AREA ( SUPPORT_AREA_ID      INTEGER       NOT NULL, OWNER_ID             INTEGER       NOT NULL, BUSINESS_SERVICE_ID  VARCHAR(20)   NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, CONSTRAINT SUPPORT_AREA_PK PRIMARY KEY (SUPPORT_AREA_ID), CONSTRAINT SUPPORT_AREAS   FOREIGN KEY (BUSINESS_SERVICE_ID) REFERENCES BUSINESS_SERVICE (BUSINESS_SERVICE_ID) );
 CREATE INDEX SUPPORT_AREA_IND1 ON SUPPORT_AREA (OWNER_ID);
 CREATE INDEX SUPPORT_AREA_IND2 ON SUPPORT_AREA (BUSINESS_SERVICE_ID);
 CREATE TABLE SUPPORT_GROUP ( SUPPORT_GROUP_ID     INTEGER       NOT NULL, OWNER_ID             INTEGER       NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, CONSTRAINT SUPPORT_GROUP_PK PRIMARY KEY (SUPPORT_GROUP_ID) );
 CREATE INDEX SUPPORT_GROUP_IND1 ON SUPPORT_GROUP (OWNER_ID);
 CREATE TABLE SUPPORT_AGENT ( SUPPORT_GROUP_ID     INTEGER       NOT NULL, USERNAME             VARCHAR(30)   NOT NULL, BEGDA                TIMESTAMP     NOT NULL, ENDDA                TIMESTAMP, SERVICE_DAYS         CHAR(1), SERVICE_HOURS        CHAR(1), WORK_SHIFT           CHAR(1), CONSTRAINT SUPPORT_AGENT_PK PRIMARY KEY (SUPPORT_GROUP_ID, USERNAME, BEGDA), CONSTRAINT SUPPORT_AGENTS   FOREIGN KEY (SUPPORT_GROUP_ID) REFERENCES SUPPORT_GROUP (SUPPORT_GROUP_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT AGENT_GROUPS     FOREIGN KEY(USERNAME) REFERENCES USER_ACCOUNT(USERNAME) );
 CREATE INDEX SUPPORT_AGENT_IND1 ON SUPPORT_AGENT (USERNAME);
 CREATE TABLE SUPPORT_TICKET ( TICKET_ID            INTEGER       NOT NULL, ASSET_NAME           VARCHAR(80)   NOT NULL, USERNAME             VARCHAR(30)   NOT NULL, SUPPORT_AREA_ID      INTEGER       NOT NULL, SUPPORT_GROUP_ID     INTEGER, SUPPORT_USER         VARCHAR(30), ISSUE_DATE           TIMESTAMP     NOT NULL, PRIORITY             CHAR(1)       NOT NULL, TICKET_TYPE          CHAR(1)       NOT NULL, STATUS               CHAR(1)       NOT NULL, CAPTION              VARCHAR(80)   NOT NULL, CONSTRAINT SUPPORT_TICKET_PK     PRIMARY KEY (TICKET_ID) , CONSTRAINT SUPPORT_AREA_TICKETS  FOREIGN KEY (SUPPORT_AREA_ID)  REFERENCES SUPPORT_AREA (SUPPORT_AREA_ID), CONSTRAINT SUPPORT_GROUP_TICKETS FOREIGN KEY (SUPPORT_GROUP_ID) REFERENCES SUPPORT_GROUP (SUPPORT_GROUP_ID), CONSTRAINT USER_ACCOUNT_TICKETS  FOREIGN KEY (USERNAME)         REFERENCES USER_ACCOUNT (USERNAME), CONSTRAINT SUPPORT_USER_TICKETS  FOREIGN KEY (SUPPORT_USER)     REFERENCES USER_ACCOUNT (USERNAME) );
 CREATE INDEX SUPPORT_TICKET_IND1 ON SUPPORT_TICKET (SUPPORT_AREA_ID);
 CREATE INDEX SUPPORT_TICKET_IND2 ON SUPPORT_TICKET (USERNAME);
 CREATE INDEX SUPPORT_TICKET_IND3 ON SUPPORT_TICKET (SUPPORT_GROUP_ID);
 CREATE INDEX SUPPORT_TICKET_IND4 ON SUPPORT_TICKET (SUPPORT_USER);
 CREATE TABLE TICKET_EVENT ( TICKET_ID            INTEGER   NOT NULL, EVENT_DATE           TIMESTAMP   NOT NULL, USERNAME             VARCHAR(30)   NOT NULL, OLD_STATUS           INTEGER   NOT NULL, NEW_STATUS           INTEGER   NOT NULL, TEXT_TYPE            INTEGER, DESCRIPTION          VARCHAR(2000), CONSTRAINT TICKET_EVENT_PK       PRIMARY KEY (TICKET_ID, EVENT_DATE), CONSTRAINT SUPPORT_TICKET_EVENTS FOREIGN KEY (TICKET_ID) REFERENCES SUPPORT_TICKET (TICKET_ID) ON DELETE CASCADE ON UPDATE CASCADE, CONSTRAINT USER_TICKET_EVENTS    FOREIGN KEY (USERNAME)  REFERENCES USER_ACCOUNT (USERNAME) );
 CREATE INDEX TICKET_EVENT_IND1 ON TICKET_EVENT (USERNAME);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (1, 'TABLE_CONTROLLER_STATIC', 'TABLE_CONTROLLER_STATIC');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (1, 1, 'TABLE_FIELD_FACES',   'TABLE_FIELD_FACE',   'TABLE_FIELD_FACES',   'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (1, 2, 'TABLE_CONTENT_TYPES', 'TABLE_CONTENT_TYPE', 'TABLE_CONTENT_TYPES', 'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (1, 3, 'TABLE_ACTIONS',       'TABLE_ACTION',       'TABLE_ACTIONS',       'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (2, 'TABLE_VIEW_SCENARIO', 'TABLE_VIEW_SCENARIO');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (2, 1, 'TABLE_VIEW_SCENARIO_ITEMS', 'TABLE_VIEW_SCENARIO_ITEM', 'TABLE_VIEW_SCENARIO_ITEMS', 'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (3, 'DOMAIN', 'DOMAIN_NAME');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (3, 1, 'DOMAIN_VALUES', 'DOMAIN_VALUE', 'DOMAIN_VALUES', 'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (4, 'MAIN_MENU', 'MAIN_MENU');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (4, 1, 'SCREEN_PAGES', 'SCREEN_PAGE', 'SCREEN_PAGES', 'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (5, 'LANGUAGE', 'LANGUAGE');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (5, 1, 'CAPTION_TRANSLATIONS', 'CAPTION_TRANSLATION', 'CAPTION_TRANSLATIONS', 'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (6, 'AUTHORITY_GROUP', 'AUTHORITY_GROUP');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (6, 1, 'OBJECT_AUTHORIZATIONS',          'OBJECT_AUTHORIZATION', 'OBJECT_AUTHORIZATIONS', 'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (6, 2, 'AUTHORITY_GROUP_AUTHORIZATIONS', 'USER_AUTHORIZATION',   'USER_AUTHORIZATIONS',   'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (6, 3, 'USER_ACCOUNT_AUTHORIZATIONS',    'USER_ACCOUNT',         'USER_ACCOUNT',          'P', 2);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (7, 'USER_ACCOUNT', 'USER_ACCOUNT');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (7, 1, 'USER_FAVORITES',                 'USER_FAVORITE',        'USER_FAVORITES',                 'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (7, 2, 'USER_NOTIFICATIONS',             'USER_NOTIFICATION',    'USER_NOTIFICATIONS',             'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (7, 3, 'USER_ACCOUNT_AUTHORIZATIONS',    'USER_AUTHORIZATION',   'USER_ACCOUNT_AUTHORIZATIONS',    'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (7, 4, 'AUTHORITY_GROUP_AUTHORIZATIONS', 'AUTHORITY_GROUP',      'AUTHORITY_GROUP_AUTHORIZATIONS', 'P', 3);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (7, 5, 'OBJECT_AUTHORIZATIONS',          'OBJECT_AUTHORIZATION', 'OBJECT_AUTHORIZATIONS',          'L', 4);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (11, 'SUPPORT_AREA', 'SUPPORT_AREA');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (11, 1, 'SUPPORT_AREAS', 'BUSINESS_SERVICE', 'BUSINESS_SERVICE', 'P', 0);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (12, 'SUPPORT_GROUP', 'SUPPORT_GROUP');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (12, 1, 'SUPPORT_AGENTS', 'SUPPORT_AGENT', 'SUPPORT_AGENTS', 'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (13, 'SUPPORT_TICKET', 'SUPPORT_TICKET');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (13, 1, 'SUPPORT_AREA_TICKETS',  'SUPPORT_AREA',  'SUPPORT_AREA',  'P', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (13, 2, 'USER_ACCOUNT_TICKETS',  'USER_ACCOUNT',  'USER_ACCOUNT',  'P', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (13, 3, 'SUPPORT_GROUP_TICKETS', 'SUPPORT_GROUP', 'SUPPORT_GROUP', 'P', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (13, 4, 'SUPPORT_USER_TICKETS',  'USER_ACCOUNT',  'USER_ACCOUNT',  'P', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (13, 5, 'SUPPORT_TICKET_EVENTS', 'TICKET_EVENT',  'TICKET_EVENTS', 'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (13, 6, 'USER_TICKET_EVENTS',    'USER_ACCOUNT',  'USER_ACCOUNT',  'P', 5);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (16, 'VENDOR', 'VENDOR');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (16, 1, 'IS_VENDOR', 'BUSINESS_PARTNER', 'BUSINESS_PARTNER', 'P', 0);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (17, 'CUSTOMER', 'CUSTOMER');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (17, 1, 'IS_CUSTOMER', 'BUSINESS_PARTNER', 'BUSINESS_PARTNER', 'P', 0);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (18, 'MATERIALS', 'MATERIAL');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (18, 1, 'MANUFACTURED_MATERIALS',         'MANUFACTURER',                  'MATERIAL_MANUFACTURER',          'P', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (18, 2, 'MATERIALS',                      'MATERIAL_TYPE',                 'MATERIALS_TYPE',                 'P', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (18, 3, 'MATERIAL_ATTRIBUTES',            'MATERIAL_ATTRIBUTE',            'MATERIAL_ATTRIBUTES',            'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (18, 4, 'ATTRIBUTE_GROUP_MATERIALS',      'MATERIAL_ATTRIBUTE_GROUP',      'ATTRIBUTES_MATERIAL_GROUP',      'P', 3);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (18, 5, 'MATERIAL_GROUP_ASSIGNMENTS',     'MATERIAL_GROUP_ASSIGNMENT',     'MATERIAL_GROUP_ASSIGNMENTS',     'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (18, 6, 'GROUP_MATERIAL_ASSIGNMENTS',     'MATERIAL_GROUP',                'ASSIGNED_MATERIAL_GROUP',        'P', 5);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (19, 'PRODUCTION_SALES', 'PRODUCT_PRICE_COMMITMENT');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (19, 1, 'MATERIAL_PRICE_COMMITMENTS',     'MATERIAL',                      'MATERIAL_ON_SALE',               'P', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (19, 2, 'MANUFACTURED_MATERIALS',         'MANUFACTURER',                  'MATERIAL_MANUFACTURER',          'P', 1);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (19, 3, 'MATERIALS',                      'MATERIAL_TYPE',                 'MATERIALS_TYPE',                 'P', 1);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (19, 4, 'MATERIAL_ATTRIBUTES',            'MATERIAL_ATTRIBUTE',            'MATERIAL_ATTRIBUTES',            'L', 1);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (19, 5, 'ATTRIBUTE_GROUP_MATERIALS',      'MATERIAL_ATTRIBUTE_GROUP',      'ATTRIBUTES_MATERIAL_GROUP',      'P', 4);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (19, 6, 'MATERIAL_GROUP_ASSIGNMENTS',     'MATERIAL_GROUP_ASSIGNMENT',     'MATERIAL_GROUP_ASSIGNMENTS',     'L', 1);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (19, 7, 'GROUP_MATERIAL_ASSIGNMENTS',     'MATERIAL_GROUP',                'ASSIGNED_MATERIAL_GROUP',        'P', 6);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (19, 8, 'PRODUCT_PRICE_COMMITMENT_ITEMS', 'PRODUCT_PRICE_COMMITMENT_ITEM', 'PRODUCT_PRICE_COMMITMENT_ITEMS', 'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (20, 'SALES_ORDERS', 'SALES_ORDER');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (20, 1, 'SALES_DELIVERY_ADDRESSES',     'SALES_DELIVERY_ADDRESS',   'SALES_DELIVERY_ADDRESSES',  'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (20, 2, 'SALES_ORDER_ITEMS',            'SALES_ORDER_ITEM',         'SALES_ORDER_ITEMS',         'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (20, 3, 'SALES_ORDER_TAXES',            'SALES_ORDER_TAX',          'SALES_ORDER_TAXES',         'L', 2);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (20, 4, 'MATERIAL_SALES_ORDERS',        'MATERIAL',                 'SALES_ITEM_MATERIAL',       'P', 2);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (20, 5, 'SALES_ORDER_COMMITMENTS',      'SALES_ORDER_COMMITMENT',   'SALES_ORDER_COMMITMENTS',   'L', 2);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (20, 6, 'COMMITMENT_SALES_ORDERS',      'PRODUCT_PRICE_COMMITMENT', 'SALES_PRICE_COMMITMENT',    'P', 5);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (20, 7, 'SALES_ORDER_ITEM_ATTRS',       'SALES_ORDER_ITEM_ATTR',    'SALES_ORDER_ITEM_ATTRS',    'L', 2);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (20, 8, 'ATTRIBUTE_GROUP_SALES_ORDERS', 'MATERIAL_ATTRIBUTE_GROUP', 'SALES_ORDER_ITEM_ATTR_GRP', 'P', 7);
 INSERT INTO TABLE_VIEW_SCENARIO (SCENARIO_ID, CAPTION, TABLENAME) VALUES (21, 'SHIPMENT', 'SHIPMENT');
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (21, 1, 'SHIPMENT_LINES',     'SHIPMENT_LINE', 'SHIPMENT_LINES', 'L', 0);
 INSERT INTO TABLE_VIEW_SCENARIO_ITEM (SCENARIO_ID, SEQ, FKNAME, TABLENAME, CAPTION, ACCESS_TYPE, PARENT_SEQ) VALUES (21, 2, 'MATERIAL_SHIPMENTS', 'MATERIAL',      'MATERIAL',       'P', 1);
